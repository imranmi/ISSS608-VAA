{
  "hash": "ef6889488cbf2669173a5ca2b0d57121",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 1 - A Layered Grammar of Graphics: ggplot2 methods\"\ndate: January 6, 2024\ndate-modified: \"last-modified\"\ntoc: true\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n  warning: false\n  message: false\n---\n\n\n# 1.1 Learning Outcome\n\nIn this exercise, we learn the basic principles and essential components of ggplot2 to plot statistical graphics based on the principle of Layered Grammar of Graphics. The objective is to be able to apply essential graphical elements provided by ggplot2 to create elegant and yet functional statistical graphics.\n\n# 1.2 Getting Started\n\n## 1.2.1 Installing and Loading the required libraries\n\nThe code chunk below uses `p_load( )` of pacman package to check if the tidyverse packages are installed in the computer. If they are, then they will be launched into the R environment.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse)\n```\n:::\n\n\n## 1.2.2 Importing Data\n\nWe import *exam_data.csv* into R environment by using the `read.csv( )` function and assign it to *exam_data*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam_data <- read.csv('data/Exam_data.csv')\n```\n:::\n\n\nIn R, when we create objects, **assignment** statements etc, we use the form:\n\n``` r\nobject_name <- value\n```\n\nWe can use glimpse( ) and summary( ) to quickly inspect *exam_data*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(exam_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 322\nColumns: 7\n$ ID      <chr> \"Student321\", \"Student305\", \"Student289\", \"Student227\", \"Stude…\n$ CLASS   <chr> \"3I\", \"3I\", \"3H\", \"3F\", \"3I\", \"3I\", \"3I\", \"3I\", \"3I\", \"3H\", \"3…\n$ GENDER  <chr> \"Male\", \"Female\", \"Male\", \"Male\", \"Male\", \"Female\", \"Male\", \"M…\n$ RACE    <chr> \"Malay\", \"Malay\", \"Chinese\", \"Chinese\", \"Malay\", \"Malay\", \"Chi…\n$ ENGLISH <int> 21, 24, 26, 27, 27, 31, 31, 31, 33, 34, 34, 36, 36, 36, 37, 38…\n$ MATHS   <int> 9, 22, 16, 77, 11, 16, 21, 18, 19, 49, 39, 35, 23, 36, 49, 30,…\n$ SCIENCE <int> 15, 16, 16, 31, 25, 16, 25, 27, 15, 37, 42, 22, 32, 36, 35, 45…\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(exam_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      ID               CLASS              GENDER              RACE          \n Length:322         Length:322         Length:322         Length:322        \n Class :character   Class :character   Class :character   Class :character  \n Mode  :character   Mode  :character   Mode  :character   Mode  :character  \n                                                                            \n                                                                            \n                                                                            \n    ENGLISH          MATHS          SCIENCE     \n Min.   :21.00   Min.   : 9.00   Min.   :15.00  \n 1st Qu.:59.00   1st Qu.:58.00   1st Qu.:49.25  \n Median :70.00   Median :74.00   Median :65.00  \n Mean   :67.18   Mean   :69.33   Mean   :61.16  \n 3rd Qu.:78.00   3rd Qu.:85.00   3rd Qu.:74.75  \n Max.   :96.00   Max.   :99.00   Max.   :96.00  \n```\n:::\n:::\n\n\n# 1.3 Introducing ggplot\n\nggplot2 is an R package for creating data-driven graphics based on The Grammar of Graphics. It is also part of the tidyverse family specially designed for visual exploration and communication.\n\nFor more information, please visit [ggplot2 link](https://ggplot2.tidyverse.org/)\n\n## 1.3.1 R Graphics VS ggplot\n\nLets compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.\n\n::: panel-tabset\n## Base R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhist(exam_data$MATHS, col = '#5e82c9')\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## ggplot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, aes(x = MATHS)) +\n  geom_histogram(bins=10, \n                 boundary = 100,\n                 color=\"black\", \n                 fill='#5e82c9') +\n  ggtitle(\"Distribution of Maths scores\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n:::\n\nAlthough the code is simpler when R Graphics is used, according to [Hadley Wickham](http://varianceexplained.org/r/teach_ggplot2_to_beginners/#comment-1745406157), \"The transferrable skills from ggplot2 are not the idiosyncracies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive\".\n\n# 1.4 Grammar of Graphics\n\nGrammar of Graphics is a general scheme for data visualization which breaks up graphs into semantic components such as scales and layers. It defines the rules of structuring mathematical and aesthetic elements into a meaningful graph.\n\nThe two principles in Grammar of Graphics are:\n\n-   Graphics = distinct layers of grammatical elements\n\n-   Meaningful plots through aesthetic mapping\n\nA good grammar of graphics will allow us to gain insight into the composition of complicated graphics, and reveal unexpected connections between seemingly different graphics (Cox 1978).\n\nFigure below shows the seven grammars of ggplot2.\n\n![A layered grammar of graphics (Hadley Wickham, 2010)](images/Grammar%20graphics.png)\n\nA short description of each building block are as follows:\n\n-   **Data**: The dataset being plotted.\n\n-   **Aesthetics** take attributes of the data and use them to influence visual characteristics, such as position, colours, size, shape, or transparency.\n\n-   **Geometrics**: The visual elements used for our data, such as point, bar or line.\n\n-   **Facets** split the data into subsets to create multiple variations of the same graph (paneling, multiple plots).\n\n-   **Statistics**, statiscal transformations that summarise data (e.g. mean, confidence intervals).\n\n-   **Coordinate systems** define the plane on which data are mapped on the graphic.\n\n-   **Themes** modify all non-data components of a plot, such as main title, sub-title, y-aixs title, or legend background.\n\n# 1.5 Essential Grammatical Elements in ggplot2: data\n\nLet us call the `ggplot( )` function using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n## Note\n\n-   A blank canvas appears.\n\n-   `ggplot()` initializes a ggplot object.\n\n-   The *data* argument defines the dataset to be used for plotting.\n\n-   If the dataset is not already a data.frame, it will be converted to one by `fortify()`.\n:::\n\n# 1.6 Essential Grammatical Elements in ggplot2: [Aesthetic mappings](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html)\n\nThe aesthetic mappings take attributes of the data and use them to influence visual characteristics, such as position, colour, size, shape, or transparency. Each visual characteristic can thus encode an aspect of the data and be used to convey information.\n\nThe code below adds the aesthetic element into the plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n## Note\n\n-   ggplot includes the x-axis and the axis’s label.\n:::\n\n# 1.7 Essential Grammatical Elements in ggplot2: geom\n\n**Geometric objects** refer to the actual marks placed on the plot. A plot must contain **at least one geometric object** in order to have an output. There’s no limit on the number of geometric objects we can add.\n\n`+` is used to add additional geometric objects to the code chunk. The image below shows examples of some geometric objects.\n\n![](images/Geomobjects.jpg)\n\nFor a complete list, please refer to [here](https://ggplot2.tidyverse.org/reference/#section-layer-geoms).\n\n## 1.7.1 Geometric Objects: `geom_bar()`\n\nThe code chunk below plots a bar chart by using `geom_bar( )`.\n\n`aes(x=RACE)` defines \"RACE\" as the x-axis.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## 1.7.2 Geometric Objects: `geom_dotplot()`\n\nIn a dot plot, the width of a dot corresponds to the bin width (or maximum width, depending on the binning algorithm), and dots are stacked, with each dot representing one observation.\n\nBelow, we use `geom_dotplot()` to plot a dot plot of math scores.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(dotsize = 0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n::: callout-caution\n## Caution\n\nThe y scale may not be useful and could be misleading\n:::\n\nWe insert 2 additional arguments in `geom_dotplot()`\n\n-   ‘binwidth’ which refers to group ranges\n\n-   ‘dotsize’ which scales the size of the dots.\n\nThe function `scale_y_continuous()` is also added to turn off the y-axis by setting it to NULL.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_dotplot(binwidth=2.5,         \n               dotsize = 0.5,\n               color=\"black\", \n               fill='#5e82c9') +\n  scale_y_continuous(NULL,           \n                     breaks = NULL)  \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n## 1.7.3 Geometric Objects: `geom_histogram()`\n\n`geom_histogram()` is used to create a simple histogram by using values in *MATHS* field of *exam_data*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_histogram()       \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n## Note\n\nThe default bin is 30.\n:::\n\n## 1.7.4 Modifying a geometric object by changing `geom()`\n\nWe modify the previous plot by using 3 arguments:-\n\n-   *bins* to change the number of bins to 20,\n\n-   *fill* to shade the histogram with another colour, and\n\n-   *color* to change the outline colours of the bars\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20,            \n                 color=\"black\",      \n                 fill='#5e82c9')  \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n## 1.7.5 Modifying a geometric object by changing `aes()`\n\nThe code below changes the interior colour of the histogram (i.e. *fill*) by using a sub-group of `aes()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, \n           fill = GENDER)) +\n  geom_histogram(bins=20, \n                 color=\"grey30\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n## Note\n\nThis approach can be used to change colour, fill and alpha of the geometric object.\n:::\n\n## 1.7.6 Geometric Objects: `geom_density()`\n\n[`geom-density()`](https://ggplot2.tidyverse.org/reference/geom_density.html) computes and plots [kernel density estimate](https://en.wikipedia.org/wiki/Kernel_density_estimation), which is a smoothed version of the histogram.\n\nIt is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.\n\nThe code below plots the distribution of Maths scores in a kernel density estimate plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS)) +\n  geom_density()           \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nThe code below plots two kernel density lines by specifically using *colour* or *fill* arguments of `aes()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x = MATHS, \n           colour = GENDER)) +\n  geom_density()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n## 1.7.7 Geometric Objects: `geom_boxplot`\n\n[`geom_boxplot()`](https://ggplot2.tidyverse.org/reference/geom_boxplot.html) displays continuous value list. It enables us to visualize five statistics (the median, two hinges and two whiskers), and all other “outlying” points individually.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS,       \n           x= GENDER)) +    \n  geom_boxplot()            \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n[**Notches**](https://sites.google.com/site/davidsstatistics/home/notched-box-plots) are used to help visually assess whether the medians of distributions differ. If the notches do not overlap, it is more than likely that the medians are different.\n\nThe code below plots the distribution of Maths scores by gender in notched plots instead of boxplots.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot(notch=TRUE)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n## 1.7.8 Geometric Objects: `geom_violin()`\n\nViolin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.\n\nThe code below plots the distribution of Maths score by gender using violin plots.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_violin()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n## 1.7.9 Geometric Objects: `geom_point()`\n\n`geom_point()` is used to create scatter plots. The code below plots a scatter plot of Maths VS English grades of pupils.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point()            \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n## 1.7.10 Combining geometric objects\n\nThe code below plots the data points on the boxplots by using both `geom_boxplot()` and `geom_point()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, \n           x= GENDER)) +\n  geom_boxplot() +                    \n  geom_point(position=\"jitter\", \n             size = 0.5)        \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\n# 1.8 Essential Grammatical Elements in ggplot2: stat\n\nThe [Statistics functions](https://ggplot2.tidyverse.org/reference/#stats) statistically transforms data, as a form of summary.\n\nThere are two ways to use these functions:\n\n-   add a `stat_()` function and override the default geom, or\n\n-   add a `geom_()` function and override the default stat.\n\n## 1.8.1 Working with `stat()`\n\nThe boxplots below are incomplete because the means are not shown.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n## 1.8.2 Working with stat - `stat_summary()`\n\nThe code below adds mean values by using `stat_summary().`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"blue\",        \n               size=4)               \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n## 1.8.3 Working with stat - `geom()` method\n\nThe code below adds mean values by using `geom().`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(y = MATHS, x= GENDER)) +\n  geom_boxplot() +\n  geom_point(stat=\"summary\",        \n             fun.y=\"mean\",           \n             colour =\"blue\",          \n             size=4)          \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n## 1.8.4 Adding a best fit curve on a scatterplot\n\nThe interpretability of scatterplots can be improved by adding a best fit curve.\n\nIn the code below, `geom_smooth()` is used to plot a best fit curve on the scatterplot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(size=0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n## Note\n\nThe default method used is *loess*\n:::\n\nThe default smoothing method can be overridden as shown below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, \n           y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n# 1.9 Essential Grammatical Elements in ggplot2: Facets\n\nFacetting generates small multiples (sometimes also called trellis plots), each displaying a different subset of the data.\n\nFacets are an alternative to aesthetics for displaying additional discrete variables.\n\n::: callout-note\n## Note\n\nggplot2 supports two types of facets: [`facet_grid()`](https://ggplot2.tidyverse.org/reference/facet_grid.html) and [`facet_wrap`](https://ggplot2.tidyverse.org/reference/facet_wrap.html).\n:::\n\n## 1.9.1 Working with `facet_wrap()`\n\nThe code below produces a 2D matrix of *‘MATHS’* histograms grouped by variable ‘*CLASS*’ using `facet_wrap(~ CLASS)` .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_wrap(~ CLASS)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n## 1.9.2 `facet_grid()` function\n\n[`facet_grid()`](https://ggplot2.tidyverse.org/reference/facet_grid.html) forms a matrix of panels defined by row and column facetting variables.\n\nIt is most useful when we have two discrete variables, and all combinations of the variables exist in the data.\n\nThe code below plots a trellis plot using `facet_grid().`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-28-1.png){width=672}\n:::\n:::\n\n\n# 1.10 Essential Grammatical Elements in ggplot2: Coordinates\n\nThe *Coordinates* functions map the position of objects onto the plane of the plot.\n\nThere are a number of different possible coordinate systems to use:\n\n1.  [coord_cartesian( )](https://ggplot2.tidyverse.org/reference/coord_cartesian.html) The default cartesian coordinate systems, where we specify x and y values (e.g. allows us to zoom in or out)\n\n2.  [coord_flip( )](https://ggplot2.tidyverse.org/reference/coord_flip.html) A cartesian system with the x and y flipped.\n\n3.  [coord_fixed( )](https://ggplot2.tidyverse.org/reference/coord_fixed.html) A cartesian system with a \"fixed\" aspect ratio (e.g. 1.78 for a \"widescreen\" plot).\n\n4.  [coord_quickmap( )](https://ggplot2.tidyverse.org/reference/coord_map.html) A coordinate system that approximates a good aspect ratio for maps.\n\n## 1.10.1 Working with Coordinate\n\nBy default, bar charts in ggplot2 are vertical.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\nUsing `coord_flip()` we can flip the vertical bar chart to a horizontal one.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n## 1.10.2 Changing the x and y axis range\n\nThe scatterplot below is misleading as the x and y axes are not equal.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, size=0.5)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\nInstead, we can set both the x and y axis ranges to 0-100.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS, y=ENGLISH)) +\n  geom_point() +\n  geom_smooth(method=lm, \n              size=0.5) +  \n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n# 1.11 Essential Grammatical Elements in ggplot2: themes\n\nThemes control elements of the graph which are not related to the data.\n\nThese include:\n\n-   background colour\n\n-   font size\n\n-   grid lines\n\n-   labels\n\nThe list of themes available can be found at this [link](https://ggplot2.tidyverse.org/reference/ggtheme.html).\n\n## 1.11.1 Working with Themes\n\nThe code below plots a horizontal bar chart using `theme_gray()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_gray()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\nWe can see the difference when we change the theme to `theme_classic()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x=RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_classic()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\nWe can further customize the chart by adding additional arguments using `theme().`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data, \n       aes(x = RACE)) +\n  geom_bar() +\n  coord_flip() +\n  theme_minimal() +\n   theme(panel.background = element_rect(fill = \"lightblue\",\n                                         color = \"white\"))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n# 1.12 Plotting Practice\n\n1.  Trellis Plot VS Box plot. Which graph provides more information visually?\n\n::: panel-tabset\n## Trellis histogram\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data=exam_data, \n       aes(x= MATHS)) +\n  geom_histogram(bins=20) +\n    facet_grid(~ CLASS)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n## Box plot by classes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = CLASS)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=1.5)               \n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n:::\n\n::: callout-note\n## Note\n\nTrellis plots using histograms may not provide much information visually as compared to box plots.\\\n\\\nThe box plot enables to quickly see how each class compares to each other. We can quickly see the range of scores, median and mean scores for each class.\n:::\n\n2.  What if we want to further compare the performance of the different genders in Maths?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data, \n       aes(y = MATHS, \n           x = CLASS)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\",       \n               fun.y=\"mean\",         \n               colour =\"red\",        \n               size=1) +  \n  facet_wrap(~ GENDER)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n## Note\n\nwe use `facet_wrap(~ GENDER)`\n:::\n\n3.  What if we want to compare both English and Math scores across the genders?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(gridExtra)\n\n# Plot for Maths\nplot_maths <- ggplot(data = exam_data, aes(x = CLASS, y = MATHS)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\", fun = mean, colour =\"red\", size=1) + \n  facet_wrap(~ GENDER) +\n  ggtitle(\"Maths Scores\")\n\n# Plot for English\nplot_english <- ggplot(data = exam_data, aes(x = CLASS, y = ENGLISH)) +\n  geom_boxplot() +\n  stat_summary(geom = \"point\", fun = mean, colour =\"blue\", size=1) + \n  facet_wrap(~ GENDER) +\n  ggtitle(\"English Scores\")\n\n# Arranging plots one on top of the other\ngrid.arrange(plot_maths, plot_english, ncol = 1)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n## Note\n\nIn this approach, **`plot_maths`** and **`plot_english`** are two separate ggplot objects for Maths and English, respectively.\n\nThe **`grid.arrange()`** function then arranges these plots in a single column (**`ncol = 1`**) layout, effectively stacking them vertically.\n:::\n\n4.  How can we improve on the basic histogram and add vertical lines representing the mean and median Maths scores?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = exam_data, \n       aes(x = MATHS)) +\n  geom_histogram(bins = 20,            \n                 color = \"black\",      \n                 fill = \"green\") +\n  geom_vline(aes(xintercept = mean(MATHS)),\n             col = 'red',\n             size = 1.0,\n             linetype = \"dashed\")+ \n  geom_vline(aes(xintercept = median(MATHS)),\n             col = 'black',\n             size = 1.0,\n             linetype = \"dashed\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex1_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n## Note\n\nInserting `aes(xintercept = mean(MATHS))` and `aes(xintercept = median(MATHS))` in both `geom_vline()` tells ggplot to draw vertical lines at the position on the x-axis that corresponds to the mean and median values.\n\nEven if the underlying data in *exam_data* changes the mean and median lines will dynamically adjust accordingly.\n\nMore information on `geom_vline()` can be found [here.](https://www.rdocumentation.org/packages/ggplot2/versions/0.9.1/topics/geom_vline)\n:::\n\n# 1.13 References\n\n-   Kam, T.S. (2023). [A Layered Grammar of Graphics: ggplot2 methods](https://r4va.netlify.app/chap01).\n\n-   Hadley Wickham (2023) [**ggplot2: Elegant Graphics for Data Analysis**](https://ggplot2-book.org/). Online 3rd edition.\n\n-   Winston Chang (2013) [**R Graphics Cookbook 2nd edition**](https://r-graphics.org/). Online version.\n\n-   Healy, Kieran (2019) [**Data Visualization: A practical introduction**](https://socviz.co/). Online version\n\n-   [Learning ggplot2 on Paper – Components](https://henrywang.nl/learning-ggplot2-on-paper-components/)\n\n-   [Learning ggplot2 on Paper – Layer](https://henrywang.nl/learning-ggplot2-on-paper-layer/)\n\n-   [Learning ggplot2 on Paper – Scale](https://henrywang.nl/tag/learning-ggplot2-on-paper/)\n",
    "supporting": [
      "Hands-on_Ex1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}