{
  "hash": "4e741fce39ac7916e713a8551e8d7caa",
  "result": {
    "markdown": "---\ntitle: \"Hands-on Exercise 4a - Visualising Distribution\"\ndate: January 29, 2024\ndate-modified: \"last-modified\"\ntoc: true\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n  warning: false\n  message: false\n---\n\n\n# 4.1 Learning Outcome\n\nIn this chapter, we will learn two new statistical graphic methods for visualising distribution, namely ridgeline plot and raincloud plot\n\n# 4.2 Getting Started\n\n## 4.2.1 Loading R package\n\nThe following R packages will be used:\n\n-   tidyverse, a family of R packages for data science processes,\n\n-   ggridges, a ggplot2 extension specially designed for plotting ridgeline plots, and\n\n-   ggdist for visualising distribution and uncertainty.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n```\n:::\n\n\n## 4.2.2 Importing data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam <- read_csv(\"data/Exam_data.csv\")\n```\n:::\n\n\n# 4.3 Visualising Distribution with Ridgeline plots\n\n*Ridgeline plot* (sometimes called *Joyplot*) is a data visualisation technique for revealing the distribution of a numeric value for several groups.\n\nFigure below is a ridgelines plot showing the distribution of English score by class.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"grey\", .3),\n    color = \"black\"\n  ) +\n  scale_x_continuous(\n    name = \"ENGLISH\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = \"CLASS\", expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex4a_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n::: callout-note\n## Note\n\nRidgeline plots make sense when the number of group to represent is medium to high, and thus a classic window separation would take to much space.\n\nIt works well when there is a clear pattern in the result, like if there is an obvious ranking in groups. Otherwise group will tend to overlap each other, leading to a messy plot not providing any insight.\n:::\n\n## 4.3.1 Plotting ridgeline graph: ggridges method\n\nHere, we will plot ridgeline plots using `ggridges package.`\n\nThere are 2 main geoms to plot ridgeline plots: [`geom_ridgeline()`](https://wilkelab.org/ggridges/reference/geom_ridgeline.html) and [`geom_density_ridges()`](https://wilkelab.org/ggridges/reference/geom_density_ridges.html).\n\nThe former takes height values directly to draw the ridgelines, and the latter first estimates data densities and then draws those using ridgelines.\n\nThe ridgeline plot below is plotted by using `geom_density_ridges()`.\n\n::: panel-tabset\n## The plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex4a_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n## The code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n:::\n\n:::\n\n## 4.3.2 Varying fill colours along the x axis\n\nWe can have the area under a ridgeline filled with colors that vary along the x axis. This effect can be achieved by using either [`geom_ridgeline_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html) or [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html). Both geoms work just like `geom_ridgeline()` and `geom_density_ridges()`, except that they allow for varying fill colors. However, they do not allow for alpha transparency in the fill.\n\nWe can have changing fill colors OR transparency but not both.\n\n::: panel-tabset\n## The Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex4a_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## The Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Grades\",\n                       option = \"D\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n:::\n\n:::\n\n## 4.3.2 Mapping the probabilities directly onto colour\n\n`ggridges package` also provides a stat function called [`stat_density_ridges()`](https://wilkelab.org/ggridges/reference/stat_density_ridges.html) that replaces [`stat_density()`](https://ggplot2.tidyverse.org/reference/geom_density.html) of ggplot2.\n\nFigure below is plotted by mapping the probabilities calculated by using `stat(ecdf)` which represent the empirical cumulative density function for the distribution of English score.\n\n::: panel-tabset\n## The Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex4a_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## The Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n```\n:::\n\n:::\n\n::: callout-important\n## Important\n\nIt is important include the argument `calc_ecdf = TRUE` in `stat_density_ridges()`.\n:::\n\n## 4.3.4 Ridgeline plots with quantile lines\n\nBy using [`geom_density_ridges_gradient()`](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html), we can colour the ridgeline plot by quantile, via the calculated `stat(quantile)` aesthetic as shown in the figure below.\n\n::: panel-tabset\n## The Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex4a_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n## The Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n```\n:::\n\n:::\n\nWe can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\n::: panel-tabset\n## The Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex4a_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n## The Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n```\n:::\n\n:::\n\n# 4.4 Visualising Distribution with Rain cloud plots\n\nRaincloud Plot is a data visualisation techniques that produces a half-density to a distribution plot.\n\nThe raincloud (half-density) plot enhances the traditional box-plot by highlighting multiple modalities (an indicator that groups may exist). The boxplot does not show where densities are clustered, but the raincloud plot does!\n\nWe will use functions provided by **ggdist** and ggplot2 packages.\n\n## 4.4.1 Plotting a Half Eye graph\n\nFirst, we will plot a Half-Eye graph by using [`stat_halfeye()`](https://mjskay.github.io/ggdist/reference/stat_halfeye.html) of **ggdist** package.\n\nThis produces a Half Eye visualization, which is contains a half-density and a slab-interval.\n\n::: panel-tabset\n## The Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex4a_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n## The Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n```\n:::\n\n\n::: callout-tip\n## Things to learn from the code above\n\nWe remove the slab interval by setting .width = 0 and point_colour = NA.\n:::\n:::\n\n## 9.4.2 Adding the boxplot with `geom_boxplot()`\n\nNext, we will add the second geometry layer using [`geom_boxplot()`](https://r4va.netlify.app/chap09) of ggplot2. This produces a narrow boxplot. We reduce the width and adjust the opacity.\n\n::: panel-tabset\n## The Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex4a_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n## The Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n```\n:::\n\n:::\n\n## 4.4.3 Adding the Dot Plots with `stat_dots()`\n\nNext, we will add the third geometry layer using [`stat_dots()`](https://mjskay.github.io/ggdist/reference/stat_dots.html) of ggdist package. This produces a half-dotplot, which is similar to a histogram that indicates the number of samples (number of dots) in each bin. We select side = “left” to indicate we want it on the left-hand side.\n\n::: panel-tabset\n## The Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex4a_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n## The Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n```\n:::\n\n:::\n\n## 4.4.2 Finishing Touch\n\nLastly, [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html) of ggplot2 package will be used to flip the raincloud chart horizontally to give it the raincloud appearance. At the same time, `theme_economist()` of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\n::: panel-tabset\n## The Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex4a_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n## The Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n```\n:::\n\n:::\n\n# 4.5 Plotting Practise\n\n1\\) Differences in distribution of genders in classes\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = interaction(CLASS, GENDER),\n         fill = GENDER)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    color = \"black\"\n  ) +\n  scale_x_continuous(\n    name = \"ENGLISH\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = \"Genders per class\", expand = expansion(add = c(0.2, 2.6))) +\n  scale_fill_manual(values = c(\"Male\" = \"lightblue\", \"Female\" = \"lightpink\")) +\n  theme_ridges() +\n  theme(legend.position = \"none\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex4a_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n2\\) Specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = interaction(CLASS, GENDER), \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  labs(y=NULL) +\n  theme_ridges() +\n  theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex4a_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n3\\) Half-eye with box plot\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  coord_flip() +\n  theme_fivethirtyeight()\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex4a_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n# 4.6 References\n\nMain reference: Kam, T.S. (2024). [Visualising Distribution.](https://r4va.netlify.app/chap09)\n",
    "supporting": [
      "Hands-on_Ex4a_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}