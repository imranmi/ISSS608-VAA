{
  "hash": "cd79f1297a4d6c186de0a625bcfbc20f",
  "result": {
    "markdown": "---\ntitle: \"Take-home Exercise 1c\"\ndate: March 17, 2024\ndate-modified: \"last-modified\"\ntoc: true\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n  warning: false\n  message: false\n---\n\n\n# Emerging Hot Spot Analysis: sfdep methods\n\nEmerging Hot Spot Analysis (EHSA) is a spatio-temporal analysis method for revealing and describing how hot spot and cold spot areas evolve over time. The analysis consist of four main steps:\n\n-   Building a space-time cube,\n\n-   Calculating Getis-Ord local Gi\\* statistic for each bin by using an FDR correction,\n\n-   Evaluating these hot and cold spot trends by using Mann-Kendall trend test,\n\n-   Categorising each study area location by referring to the resultant trend z-score and p-value for each location with data, and with the hot spot z-score and p-value for each bin.\n\n# Data Loading and Prep\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, dplyr , \n               sf, lubridate,plotly,\n               tmap, spdep, sfdep)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nACLED_MMR <- read_csv(\"data/MMR.csv\")\n```\n:::\n\n\nShapes files for Myanmar at admin1 and admin2 levels\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmmr_shp_mimu_2 <-  st_read(dsn = \"data/geospatial3\",  \n                  layer = \"mmr_polbnda_adm2_250k_mimu\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `mmr_polbnda_adm2_250k_mimu' from data source \n  `C:\\imranmi\\ISSS608-VAA\\Take-home-ex\\Take-home-Ex1c\\data\\geospatial3' \n  using driver `ESRI Shapefile'\nSimple feature collection with 80 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nmmr_shp_mimu_1 <-  st_read(dsn = \"data/geospatial3\",  \n                  layer = \"mmr_polbnda2_adm1_250k_mimu_1\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `mmr_polbnda2_adm1_250k_mimu_1' from data source \n  `C:\\imranmi\\ISSS608-VAA\\Take-home-ex\\Take-home-Ex1c\\data\\geospatial3' \n  using driver `ESRI Shapefile'\nSimple feature collection with 18 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n\nRenaming the region and district names so that our dataset will be the same as the shape files\n\n\n::: {.cell}\n\n```{.r .cell-code}\nACLED_MMR_1 <- ACLED_MMR %>%\n  mutate(admin1 = case_when(\n    admin1 == \"Bago-East\" ~ \"Bago (East)\",\n    admin1 == \"Bago-West\" ~ \"Bago (West)\",\n    admin1 == \"Shan-North\" ~ \"Shan (North)\",\n    admin1 == \"Shan-South\" ~ \"Shan (South)\",\n    admin1 == \"Shan-East\" ~ \"Shan (East)\",\n    TRUE ~ as.character(admin1)\n  ))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nACLED_MMR_1 <- ACLED_MMR_1 %>%\n  mutate(admin2 = case_when(\n    admin2 == \"Yangon-East\" ~ \"Yangon (East)\",\n    admin2 == \"Yangon-West\" ~ \"Yangon (West)\",\n    admin2 == \"Yangon-North\" ~ \"Yangon (North)\",\n    admin2 == \"Yangon-South\" ~ \"Yangon (South)\",\n    admin2 == \"Mong Pawk (Wa SAD)\" ~ \"Tachileik\",\n    admin2 == \"Nay Pyi Taw\" ~ \"Det Khi Na\",\n    admin2 == \"Yangon\" ~ \"Yangon (West)\",\n    TRUE ~ as.character(admin2)\n  ))\n```\n:::\n\n\n# Creating a Time Series Cube\n\nIn the code chunk below, [`spacetime()`](https://sfdep.josiahparry.com/reference/spacetime.html) of sfdep is used to create an spatio-temporal cube.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n#GDPPC <- read_csv(\"data/aspatial/Hunan_GDPPC.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n#hunan <- st_read(dsn = \"data/geospatial4\", \n                 #layer = \"Hunan\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n#class(GDPPC)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n#class(hunan)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n#GDPPC_st <- spacetime(GDPPC, hunan,\n                      #.loc_col = \"County\",\n                      #.time_col = \"Year\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n#is_spacetime_cube(GDPPC_st)\n```\n:::\n\n\n### Filtering for Battles for admin 1 & 2 and renaming the column names\n\nloc_col identifier needs to be the same name for both data and shape file\n\nSince 2024 data is not for the full year, we will remove it. We will the total up the count of Incidents for event type== Battles.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBattles_admin1 <- ACLED_MMR_1 %>%\n    group_by(year, admin1) %>%\n    filter(year != 2024, event_type == \"Battles\") %>%\n    summarise(Incidents = n()) %>%\n    ungroup() %>%\n    rename(ST = admin1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nBattles_admin2 <- ACLED_MMR_1 %>%\n    group_by(year, admin2) %>%\n    filter(year != 2024, event_type == \"Battles\") %>%\n    summarise(Incidents = n()) %>%\n    ungroup() %>%\n    rename(DT = admin2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbattles_spacial1 <- spacetime(Battles_admin1, mmr_shp_mimu_1,\n                      .loc_col = \"ST\",\n                      .time_col = \"year\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nis_spacetime_cube(battles_spacial1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbattles_spacial2 <- spacetime(Battles_admin2, mmr_shp_mimu_2,\n                      .loc_col = \"DT\",\n                      .time_col = \"year\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nis_spacetime_cube(battles_spacial2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE\n```\n:::\n:::\n\n\nThis is due to some years having zero incidents, this needs to be populated as zero, all state/region and district names have to be accounted for, and for each year\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n#Battles_admin1_2124 <- read_csv(\"data/Battles_admin1_2124.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n#battles_test2 <- spacetime(Battles_admin1_2124, mmr_shp_mimu_1,\n                   #.loc_col = \"ST\",\n                   #.time_col = \"year\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\n#is_spacetime_cube(battles_test2)\n```\n:::\n\n\n## Using `complete_spacetime_cube()`\n\nAs per above, we have an incomplete space time cube due to missing districts/regions, with no incidents in some years.\n\nAccording to [Josiah Perry](https://sfdep.josiahparry.com/articles/spacetime-s3.html), if an object is a **sparse** spatio-temporal grid, we can make it a full one using `complete_spacetime_cube()`. This works similarly to \\[tidyr::complete()\\].\n\n`complete_spacetime_cube()` ensures that there is a row for each combination of location and time. New rows will contain missing values\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspt1_complete <- complete_spacetime_cube(battles_spacial1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nis_spacetime_cube(spt1_complete)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nspt2_complete <- complete_spacetime_cube(battles_spacial2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nis_spacetime_cube(spt2_complete)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\nWe have successfull converted to a space time object. However using `complete_spacetime_cube()` , leaves zero values as NAs, this needs to be converted to '0' value.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Replace NA with zero for the incidents where there were no incidents\nspt1_complete$Incidents[is.na(spt1_complete$Incidents)] <- 0\nspt2_complete$Incidents[is.na(spt2_complete$Incidents)] <- 0\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(spt1_complete)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"spacetime\"  \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(spt2_complete)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"spacetime\"  \"tbl_df\"     \"tbl\"        \"data.frame\"\n```\n:::\n:::\n\n\n# Computing Gi\\*\n\nNext, we will compute the local Gi\\* statistics.\n\n### Deriving the spatial weights\n\nThe code below will be used to identify neighbors and to derive an inverse distance weights.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# for admin 1 regions/states\nIncidents1_nb <- spt1_complete %>%\n  activate(\"geometry\") %>%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry,\n                                  scale = 1,\n                                  alpha = 1),\n         .before = 1) %>%\n  set_nbs(\"nb\") %>%\n  set_wts(\"wt\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#for admin 2 districts\nIncidents2_nb <- spt2_complete %>%\n  activate(\"geometry\") %>%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry,\n                                  scale = 1,\n                                  alpha = 1),\n         .before = 1) %>%\n  set_nbs(\"nb\") %>%\n  set_wts(\"wt\")\n```\n:::\n\n\n::: callout-note\n## Note\n\n-   `activate()` of dplyr package is used to activate the geometry context\n\n-   `mutate()` of dplyr package is used to create two new columns *nb* and *wt*.\n\n-   Then we will activate the data context again and copy over the nb and wt columns to each time-slice using `set_nbs()` and `set_wts()`\n\n    -   row order is very important so do not rearrange the observations after using `set_nbs()` or `set_wts()`.\n:::\n\nNote that the data sets now have neighbors and weights for each time-slice.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(Incidents1_nb)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n  ST           year Incidents nb        wt       \n  <chr>       <dbl>     <dbl> <list>    <list>   \n1 Ayeyarwady   2010         0 <int [4]> <dbl [4]>\n2 Bago (East)  2010         0 <int [7]> <dbl [7]>\n3 Bago (West)  2010         0 <int [6]> <dbl [6]>\n4 Chin         2010         0 <int [4]> <dbl [4]>\n5 Kachin       2010         2 <int [3]> <dbl [3]>\n6 Kayah        2010         1 <int [3]> <dbl [3]>\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(Incidents2_nb)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 5\n  DT         year Incidents nb        wt       \n  <chr>     <dbl>     <dbl> <list>    <list>   \n1 Hinthada   2010         0 <int [7]> <dbl [7]>\n2 Labutta    2010         0 <int [3]> <dbl [3]>\n3 Maubin     2010         0 <int [7]> <dbl [7]>\n4 Myaungmya  2010         0 <int [5]> <dbl [5]>\n5 Pathein    2010         0 <int [5]> <dbl [5]>\n6 Pyapon     2010         0 <int [5]> <dbl [5]>\n```\n:::\n:::\n\n\n## Computing Gi\\*\n\nWe can use these new columns to manually calculate the local Gi\\* for each location. We can do this by grouping by *year* and using `local_gstar_perm()` of sfdep package. After which, we `use unnest()` to unnest *gi_star* column of the newly created *gi_starts* data.frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#for admin 1\ngi_stars1 <- Incidents1_nb %>% \n  group_by(year) %>% \n  mutate(gi_star = local_gstar_perm(\n    Incidents, nb, wt)) %>% \n  tidyr::unnest(gi_star)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#for admin 2\ngi_stars2 <- Incidents2_nb %>% \n  group_by(year) %>% \n  mutate(gi_star = local_gstar_perm(\n    Incidents, nb, wt)) %>% \n  tidyr::unnest(gi_star)\n```\n:::\n\n\n# Mann-Kendall Test\n\nWith these Gi\\* measures we can then evaluate each location for a trend using the Mann-Kendall test.\n\nThe code chunk below uses Ayeyarwady region.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncbg1 <- gi_stars1 %>% \n  ungroup() %>% \n  filter(ST == \"Ayeyarwady\") |> \n  select(ST, year, gi_star)\n```\n:::\n\n\nThe code chunk below uses Hinthada region.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncbg2 <- gi_stars2 %>% \n  ungroup() %>% \n  filter(DT == \"Hinthada\") |> \n  select(DT, year, gi_star)\n```\n:::\n\n\nNext, we plot the result by using ggplotly() of plotly package.\n\n**Ayeyarwady region**\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(data = cbg1, \n       aes(x = year, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\nggplotly(p)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-28449de7bdbb3371a5a4\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-28449de7bdbb3371a5a4\">{\"x\":{\"data\":[{\"x\":[2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023],\"y\":[-0.97639172963923548,-1.2370693538055815,-0.85577398185439468,-1.014648341135941,-0.99526935456030563,-0.94177606028366589,-0.82636231183630393,-0.80590178122219003,-0.73357637130261955,1.1195403810229505,1.0287250071858209,-1.8539039907326333,-1.6732927062434488,-1.9062393789379779],\"text\":[\"year: 2010<br />gi_star: -0.9763917\",\"year: 2011<br />gi_star: -1.2370694\",\"year: 2012<br />gi_star: -0.8557740\",\"year: 2013<br />gi_star: -1.0146483\",\"year: 2014<br />gi_star: -0.9952694\",\"year: 2015<br />gi_star: -0.9417761\",\"year: 2016<br />gi_star: -0.8263623\",\"year: 2017<br />gi_star: -0.8059018\",\"year: 2018<br />gi_star: -0.7335764\",\"year: 2019<br />gi_star:  1.1195404\",\"year: 2020<br />gi_star:  1.0287250\",\"year: 2021<br />gi_star: -1.8539040\",\"year: 2022<br />gi_star: -1.6732927\",\"year: 2023<br />gi_star: -1.9062394\"],\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":1.8897637795275593,\"color\":\"rgba(0,0,0,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":26.228310502283104,\"r\":7.3059360730593621,\"b\":40.182648401826491,\"l\":37.260273972602747},\"plot_bgcolor\":\"rgba(255,255,255,1)\",\"paper_bgcolor\":\"rgba(255,255,255,1)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[2009.3499999999999,2023.6500000000001],\"tickmode\":\"array\",\"ticktext\":[\"2012\",\"2016\",\"2020\"],\"tickvals\":[2012,2016,2020],\"categoryorder\":\"array\",\"categoryarray\":[\"2012\",\"2016\",\"2020\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(179,179,179,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.33208800332088001,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(222,222,222,1)\",\"gridwidth\":0.33208800332088001,\"zeroline\":false,\"anchor\":\"y\",\"title\":{\"text\":\"year\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[-2.0575283669360243,1.2708293690209969],\"tickmode\":\"array\",\"ticktext\":[\"-2\",\"-1\",\"0\",\"1\"],\"tickvals\":[-2,-1,0,1],\"categoryorder\":\"array\",\"categoryarray\":[\"-2\",\"-1\",\"0\",\"1\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(179,179,179,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.33208800332088001,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(222,222,222,1)\",\"gridwidth\":0.33208800332088001,\"zeroline\":false,\"anchor\":\"x\",\"title\":{\"text\":\"gi_star\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":\"transparent\",\"line\":{\"color\":\"rgba(179,179,179,1)\",\"width\":0.66417600664176002,\"linetype\":\"solid\"},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1}],\"showlegend\":false,\"legend\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.8897637795275593,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.68949771689498}},\"hovermode\":\"closest\",\"barmode\":\"relative\"},\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"6fd0548d3154\":{\"x\":{},\"y\":{},\"type\":\"scatter\"}},\"cur_data\":\"6fd0548d3154\",\"visdat\":{\"6fd0548d3154\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n**Hinthada district**\n\n\n::: {.cell}\n\n```{.r .cell-code}\np <- ggplot(data = cbg2, \n       aes(x = year, \n           y = gi_star)) +\n  geom_line() +\n  theme_light()\n\nggplotly(p)\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"plotly html-widget html-fill-item\" id=\"htmlwidget-b55cbaaf1b5df43e1c8f\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-b55cbaaf1b5df43e1c8f\">{\"x\":{\"data\":[{\"x\":[2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023],\"y\":[-0.94605372660820686,-0.98999976809231927,-0.78535577681782065,-0.77681225142089239,-0.84413433136443705,-0.99206911475362936,-0.88047308231861143,-0.99628744792947188,-1.1219479316629009,-0.82753497286449584,-0.89519535768675207,-1.6719690471023798,-1.9302327303942484,-1.8069782252251076],\"text\":[\"year: 2010<br />gi_star: -0.9460537\",\"year: 2011<br />gi_star: -0.9899998\",\"year: 2012<br />gi_star: -0.7853558\",\"year: 2013<br />gi_star: -0.7768123\",\"year: 2014<br />gi_star: -0.8441343\",\"year: 2015<br />gi_star: -0.9920691\",\"year: 2016<br />gi_star: -0.8804731\",\"year: 2017<br />gi_star: -0.9962874\",\"year: 2018<br />gi_star: -1.1219479\",\"year: 2019<br />gi_star: -0.8275350\",\"year: 2020<br />gi_star: -0.8951954\",\"year: 2021<br />gi_star: -1.6719690\",\"year: 2022<br />gi_star: -1.9302327\",\"year: 2023<br />gi_star: -1.8069782\"],\"type\":\"scatter\",\"mode\":\"lines\",\"line\":{\"width\":1.8897637795275593,\"color\":\"rgba(0,0,0,1)\",\"dash\":\"solid\"},\"hoveron\":\"points\",\"showlegend\":false,\"xaxis\":\"x\",\"yaxis\":\"y\",\"hoverinfo\":\"text\",\"frame\":null}],\"layout\":{\"margin\":{\"t\":26.228310502283104,\"r\":7.3059360730593621,\"b\":40.182648401826491,\"l\":54.794520547945211},\"plot_bgcolor\":\"rgba(255,255,255,1)\",\"paper_bgcolor\":\"rgba(255,255,255,1)\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724},\"xaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[2009.3499999999999,2023.6500000000001],\"tickmode\":\"array\",\"ticktext\":[\"2012\",\"2016\",\"2020\"],\"tickvals\":[2012,2016,2020],\"categoryorder\":\"array\",\"categoryarray\":[\"2012\",\"2016\",\"2020\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(179,179,179,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.33208800332088001,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(222,222,222,1)\",\"gridwidth\":0.33208800332088001,\"zeroline\":false,\"anchor\":\"y\",\"title\":{\"text\":\"year\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"yaxis\":{\"domain\":[0,1],\"automargin\":true,\"type\":\"linear\",\"autorange\":false,\"range\":[-1.9879037543429161,-0.71914122747222464],\"tickmode\":\"array\",\"ticktext\":[\"-1.75\",\"-1.50\",\"-1.25\",\"-1.00\",\"-0.75\"],\"tickvals\":[-1.75,-1.5,-1.25,-1,-0.75],\"categoryorder\":\"array\",\"categoryarray\":[\"-1.75\",\"-1.50\",\"-1.25\",\"-1.00\",\"-0.75\"],\"nticks\":null,\"ticks\":\"outside\",\"tickcolor\":\"rgba(179,179,179,1)\",\"ticklen\":3.6529680365296811,\"tickwidth\":0.33208800332088001,\"showticklabels\":true,\"tickfont\":{\"color\":\"rgba(77,77,77,1)\",\"family\":\"\",\"size\":11.68949771689498},\"tickangle\":-0,\"showline\":false,\"linecolor\":null,\"linewidth\":0,\"showgrid\":true,\"gridcolor\":\"rgba(222,222,222,1)\",\"gridwidth\":0.33208800332088001,\"zeroline\":false,\"anchor\":\"x\",\"title\":{\"text\":\"gi_star\",\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":14.611872146118724}},\"hoverformat\":\".2f\"},\"shapes\":[{\"type\":\"rect\",\"fillcolor\":\"transparent\",\"line\":{\"color\":\"rgba(179,179,179,1)\",\"width\":0.66417600664176002,\"linetype\":\"solid\"},\"yref\":\"paper\",\"xref\":\"paper\",\"x0\":0,\"x1\":1,\"y0\":0,\"y1\":1}],\"showlegend\":false,\"legend\":{\"bgcolor\":\"rgba(255,255,255,1)\",\"bordercolor\":\"transparent\",\"borderwidth\":1.8897637795275593,\"font\":{\"color\":\"rgba(0,0,0,1)\",\"family\":\"\",\"size\":11.68949771689498}},\"hovermode\":\"closest\",\"barmode\":\"relative\"},\"config\":{\"doubleClick\":\"reset\",\"modeBarButtonsToAdd\":[\"hoverclosest\",\"hovercompare\"],\"showSendToCloud\":false},\"source\":\"A\",\"attrs\":{\"6fd0f1a6269\":{\"x\":{},\"y\":{},\"type\":\"scatter\"}},\"cur_data\":\"6fd0f1a6269\",\"visdat\":{\"6fd0f1a6269\":[\"function (y) \",\"x\"]},\"highlight\":{\"on\":\"plotly_click\",\"persistent\":false,\"dynamic\":false,\"selectize\":false,\"opacityDim\":0.20000000000000001,\"selected\":{\"opacity\":1},\"debounce\":0},\"shinyEvents\":[\"plotly_hover\",\"plotly_click\",\"plotly_selected\",\"plotly_relayout\",\"plotly_brushed\",\"plotly_brushing\",\"plotly_clickannotation\",\"plotly_doubleclick\",\"plotly_deselect\",\"plotly_afterplot\",\"plotly_sunburstclick\"],\"base_url\":\"https://plot.ly\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\nMann Kendall test for **Ayeyarwady region**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncbg1 %>%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %>% \n  tidyr::unnest_wider(mk)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 5\n     tau    sl     S     D  varS\n   <dbl> <dbl> <dbl> <dbl> <dbl>\n1 0.0769 0.743     7  91.0  334.\n```\n:::\n:::\n\n\nMann Kendall test for **Hinthada district**\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncbg2 %>%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %>% \n  tidyr::unnest_wider(mk)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 5\n     tau     sl     S     D  varS\n   <dbl>  <dbl> <dbl> <dbl> <dbl>\n1 -0.495 0.0160   -45  91.0  334.\n```\n:::\n:::\n\n\nValues of Mann Kendall test.\n\n|        |                         |\n|--------|-------------------------|\n| `tau`  | Kendall's tau statistic |\n| `sl`   | two-sided p-value       |\n| `S`    | Kendall Score           |\n| `D`    | denominator, tau=S/D    |\n| `varS` | variance of S           |\n\nWe can replicate this for each location by using `group_by()` of dplyr package.\n\n**Admin 1 regions/states**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa1 <- gi_stars1 %>%\n  group_by(ST) %>%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %>%\n  tidyr::unnest_wider(mk)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 18 × 6\n   ST               tau        sl     S     D  varS\n   <chr>          <dbl>     <dbl> <dbl> <dbl> <dbl>\n 1 Ayeyarwady    0.0769 0.743         7  91.0  334.\n 2 Bago (East)  -0.143  0.511       -13  91.0  334.\n 3 Bago (West)   0.143  0.511        13  91.0  334.\n 4 Chin          0.780  0.000127     71  91.0  334.\n 5 Kachin       -0.165  0.443       -15  91.0  334.\n 6 Kayah        -0.165  0.443       -15  91.0  334.\n 7 Kayin        -0.231  0.274       -21  91.0  334.\n 8 Magway        0.868  0.0000196    79  91.0  334.\n 9 Mandalay      0.407  0.0487       37  91.0  334.\n10 Mon          -0.0989 0.661        -9  91.0  334.\n11 Nay Pyi Taw  -0.297  0.155       -27  91.0  334.\n12 Rakhine       0.407  0.0487       37  91.0  334.\n13 Sagaing       0.495  0.0160       45  91.0  334.\n14 Shan (East)  -0.473  0.0215      -43  91.0  334.\n15 Shan (North) -0.143  0.511       -13  91.0  334.\n16 Shan (South) -0.670  0.00102     -61  91.0  334.\n17 Tanintharyi   0.0110 1             1  91.0  334.\n18 Yangon       -0.341  0.101       -31  91.0  334.\n```\n:::\n:::\n\n\n**Admin 2 districts**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa2 <- gi_stars2 %>%\n  group_by(DT) %>%\n  summarise(mk = list(\n    unclass(\n      Kendall::MannKendall(gi_star)))) %>%\n  tidyr::unnest_wider(mk)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 80 × 6\n   DT                              tau        sl     S     D  varS\n   <chr>                         <dbl>     <dbl> <dbl> <dbl> <dbl>\n 1 Bago                         0.231  0.274        21  91.0  334.\n 2 Bawlake                      0.0989 0.661         9  91.0  334.\n 3 Bhamo                       -0.363  0.0798      -33  91.0  334.\n 4 Danu Self-Administered Zone -0.451  0.0285      -41  91.0  334.\n 5 Dawei                        0.253  0.228        23  91.0  334.\n 6 Det Khi Na                  -0.714  0.000459    -65  91.0  334.\n 7 Falam                        0.231  0.274        21  91.0  334.\n 8 Gangaw                       0.802  0.0000809    73  91.0  334.\n 9 Hakha                        0.802  0.0000809    73  91.0  334.\n10 Hinthada                    -0.495  0.0160      -45  91.0  334.\n# ℹ 70 more rows\n```\n:::\n:::\n\n\n## Arrange to show significant emerging hot/cold spots\n\n**Admin 1 regions/states**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemerging1 <- ehsa1 %>% \n  arrange(sl, abs(tau)) %>% \n  slice(1:5)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nemerging1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 6\n  ST              tau        sl     S     D  varS\n  <chr>         <dbl>     <dbl> <dbl> <dbl> <dbl>\n1 Magway        0.868 0.0000196    79  91.0  334.\n2 Chin          0.780 0.000127     71  91.0  334.\n3 Shan (South) -0.670 0.00102     -61  91.0  334.\n4 Sagaing       0.495 0.0160       45  91.0  334.\n5 Shan (East)  -0.473 0.0215      -43  91.0  334.\n```\n:::\n:::\n\n\nAdmin 2 districts\n\n\n::: {.cell}\n\n```{.r .cell-code}\nemerging2 <- ehsa2 %>% \n  arrange(sl, abs(tau)) %>% \n  slice(1:5)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nemerging2\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 6\n  DT           tau        sl     S     D  varS\n  <chr>      <dbl>     <dbl> <dbl> <dbl> <dbl>\n1 Kengtung  -0.890 0.0000119   -81  91.0  334.\n2 Gangaw     0.802 0.0000809    73  91.0  334.\n3 Hakha      0.802 0.0000809    73  91.0  334.\n4 Monghsat  -0.780 0.000127    -71  91.0  334.\n5 Tachileik -0.758 0.000197    -69  91.0  334.\n```\n:::\n:::\n\n\n## Performing Emerging Hotspot Analysis\n\nLastly, we will perform EHSA analysis by using [`emerging_hotspot_analysis()`](https://sfdep.josiahparry.com/reference/emerging_hotspot_analysis.html) of sfdep package. It takes a spacetime object x (i.e. spt1_complete, sp2_complete), and the quoted name of the variable of interest (i.e. Incidents) for .var argument.\n\nThe **k argument is used to specify the** **number of time lags** which is set to 1 by default.\n\nLastly, **nsim map** **numbers of simulation** to be performed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa1 <- emerging_hotspot_analysis(\n  x = spt1_complete, \n  .var = \"Incidents\", \n  k = 1, \n  nsim = 99\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nehsa2 <- emerging_hotspot_analysis(\n  x = spt2_complete, \n  .var = \"Incidents\", \n  k = 1, \n  nsim = 99\n)\n```\n:::\n\n\n### Visualising the distribution of EHSA classes\n\nIn the code chunk below, ggplot2 functions is used to reveal the distribution of EHSA classes as a bar chart.\n\n**Admin 1 regions/states**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ehsa1,\n       aes(x = classification)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1c_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n:::\n\n\n**Admin2 districts**\n\n\n::: {.cell .column-body-outset-right}\n\n```{.r .cell-code}\nggplot(data = ehsa2,\n       aes(x = classification)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1c_files/figure-html/unnamed-chunk-52-1.png){width=960}\n:::\n:::\n\n\n### Visualising EHSA\n\nIn this section, we will learn how to visualise the geographic distribution EHSA classes. However, before we can do so, we need to join both (mmr_shp_mimu_1 & *ehsa1) and* (mmr_shp_mimu_2 & *ehsa2)* together by using the code chunk below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmmr1_ehsa <- mmr_shp_mimu_1 %>%\n  left_join(ehsa1,\n            by = join_by(ST == location))\n\nmmr2_ehsa <- mmr_shp_mimu_2 %>%\n  left_join(ehsa2,\n            by = join_by(DT == location))\n```\n:::\n\n\nNext, tmap functions will be used to plot a categorical choropleth map by using the code chunk below.\n\n\n::: {.cell .column-body-outset-right}\n\n```{.r .cell-code}\nehsa_sig1 <- mmr1_ehsa  %>%\n  filter(p_value < 0.05)\n\ntmap_mode(\"plot\")\n\ntm_shape(mmr1_ehsa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_sig1) +\n  tm_fill(\"classification\") + \n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1c_files/figure-html/unnamed-chunk-54-1.png){width=960}\n:::\n:::\n\n::: {.cell .column-body-outset-right}\n\n```{.r .cell-code}\nehsa_sig2 <- mmr2_ehsa  %>%\n  filter(p_value < 0.05)\n\ntmap_mode(\"plot\")\n\ntm_shape(mmr2_ehsa) +\n  tm_polygons() +\n  tm_borders(alpha = 0.5) +\ntm_shape(ehsa_sig2) +\n  tm_fill(\"classification\") + \n  tm_borders(alpha = 0.4)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex1c_files/figure-html/unnamed-chunk-55-1.png){width=960}\n:::\n:::\n",
    "supporting": [
      "Take-home_Ex1c_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.6.4/htmlwidgets.js\"></script>\r\n<script src=\"../../site_libs/plotly-binding-4.10.4/plotly.js\"></script>\r\n<script src=\"../../site_libs/typedarray-0.1/typedarray.min.js\"></script>\r\n<script src=\"../../site_libs/jquery-3.5.1/jquery.min.js\"></script>\r\n<link href=\"../../site_libs/crosstalk-1.2.1/css/crosstalk.min.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/crosstalk-1.2.1/js/crosstalk.min.js\"></script>\r\n<link href=\"../../site_libs/plotly-htmlwidgets-css-2.11.1/plotly-htmlwidgets.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/plotly-main-2.11.1/plotly-latest.min.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}