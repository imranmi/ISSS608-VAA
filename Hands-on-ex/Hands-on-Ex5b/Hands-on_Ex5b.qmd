---
title: "Hands-on Exercise 5b- Visual Correlation Analysis"
date: February 5, 2024
date-modified: "last-modified"
toc: true
execute: 
  eval: true
  echo: true
  warning: false
---

# 5.1 Overview

There are three broad reasons for computing a correlation matrix.

-   To reveal the relationship between high-dimensional variables pair-wisely.

-   To input into other analyses. For example, people commonly use correlation matrices as inputs for exploratory factor analysis, confirmatory factor analysis, structural equation models, and linear regression when excluding missing values pairwise.

-   As a diagnostic when checking other analyses. For example, with linear regression a high amount of correlations suggests that the linear regression’s estimates will be unreliable.

When the data is large, both in terms of the number of observations and the number of variables, [Corrgram](http://www.datavis.ca/papers/corrgram.pdf) tend to be used to visually explore and analyse the structure and the patterns of relations among variables. It is designed based on two main schemes:

-   Rendering the value of a correlation to depict its sign and magnitude, and

-   Reordering the variables in a correlation matrix so that “similar” variables are positioned adjacently, facilitating perception.

In this hands-on exercise, we will learn how to plot data visualisation for visualising correlation matrix with R. It consists of three main sections. First, we create correlation matrix using [*pairs()*](https://www.rdocumentation.org/packages/graphics/versions/3.6.0/topics/pairs) of R Graphics. Next, we plot corrgram using **corrplot** package of R. Lastly, we create an interactive correlation matrix using plotly R.

# 5.2 Installing and Launching R packages

```{r}
pacman::p_load(corrplot, ggstatsplot, tidyverse, ggplot2)
```

# 5.3 Importing and Data preparation

In this hands-on exercise, the [Wine Quality Data Set](https://archive.ics.uci.edu/ml/datasets/wine+quality) of UCI Machine Learning Repository will be used. The data set consists of 13 variables and 6497 observations. For the purpose of this exercise, we have combined the red wine and white wine data into one data file. It is called wine_quality and is in csv file format.

```{r}
wine <- read_csv("data/wine_quality.csv")
```

Beside quality and type, the rest of the variables are numerical and continuous data type.

# 5.4 Building Correlation Matrix: pairs() method

In this section, we will learn how to create a scatterplot matrix by using the *pairs* function of R Graphics.

The syntax description can be found in [*pairs*](https://stat.ethz.ch/R-manual/R-devel/library/graphics/html/pairs.html) link.

## 5.4.1 Basic correlation matrix

```{r}
pairs(wine[,1:11])
```

The required input of *pairs()* can be a matrix or data frame. The code chunk used to create the scatterplot matrix is relatively simple. It uses the default *pairs* function.

```{r}
pairs(wine[,2:12])
```

## 5.4.2 Drawing the lower or upper corners

*pairs* function of R Graphics provides many customisation arguments. For example, it is a common practice to show either the upper half or lower half of the correlation matrix instead of both. This is because a correlation matrix is symmetric.

To show the lower half of the correlation matrix, the upper.panel argument will be used as shown in the code chunk below.

```{r}
pairs(wine[,2:12], upper.panel = NULL)
```

We can also display the upper half of the correlation matrix by using the code below.

```{r}
pairs(wine[,2:12], lower.panel = NULL)
```

## 5.4.3 Including with correlation coefficients

To show the correlation coefficient of each pair of variables instead of a scatter plot, [*panel.cor*](https://www.rdocumentation.org/packages/xcms/versions/1.48.0/topics/panel.cor) function will be used. This will also show higher correlations in a larger font.

```{r}
panel.cor <- function(x, y, digits=2, prefix="", cex.cor, ...) {
usr <- par("usr")
on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y, use="complete.obs"))
txt <- format(c(r, 0.123456789), digits=digits)[1]
txt <- paste(prefix, txt, sep="")
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * (1 + r) / 2)
}

pairs(wine[,2:12], 
      upper.panel = panel.cor)
```

# 5.5 Visualising Correlation Matrix: ggcormat()

One of the major limitation of the correlation matrix is that the scatter plots appear very cluttered when the number of observations is relatively large (i.e. more than 500 observations). To over come this problem, **Corrgram** data visualisation technique suggested by D. J. Murdoch and E. D. Chow (1996) and Friendly, M (2002) and will be used.

The are at least three R packages provide function to plot corrgram, they are:

-   [corrgram](https://cran.r-project.org/web/packages/corrgram/)

-   [ellipse](https://cran.r-project.org/web/packages/ellipse/)

-   [corrplot](https://cran.r-project.org/web/packages/corrplot/)

On top that, some R package like ggstatsplot package also provides functions for building corrgram.

In this section, we will learn how to visualising correlation matrix by using [*ggcorrmat()*](https://indrajeetpatil.github.io/ggstatsplot/reference/ggcorrmat.html) of [**ggstatsplot**](https://indrajeetpatil.github.io/ggstatsplot/) package.

## 5.5.1 The Basic Plot

One of the advantage of using *ggcorrmat()* over many other methods to visualise a correlation matrix is it’s ability to provide a comprehensive and yet professional statistical report as shown in the figure below.

```{r}

library(ggstatsplot)

ggcorrmat(
  data = wine, 
  cor.vars = 1:11)
```

```{r}
ggstatsplot::ggcorrmat(
  data = wine, 
  cor.vars = 1:11,
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10),
  title    = "Correlogram for wine dataset",
  subtitle = "Four pairs are no significant at p < 0.05"
)
```

Things to learn from the code above:

-   `cor.vars` argument is used to compute the correlation matrix needed to build the corrgram.

-   `ggcorrplot.args` argument provide additional (mostly aesthetic) arguments that will be passed to [`ggcorrplot::ggcorrplot`](http://www.sthda.com/english/wiki/ggcorrplot-visualization-of-a-correlation-matrix-using-ggplot2) function. The list should avoid any of the following arguments since they are already internally being used: `corr`, `method`, `p.mat`, `sig.level`, `ggtheme`, `colors`, `lab`, `pch`, `legend.title`, `digits`.

The sample sub-code chunk can be used to control specific component of the plot such as the font size of the x-axis, y-axis, and the statistical report.

```{r}
#ggplot.component = list(
    #theme(text=element_text(size=5),
      #axis.text.x = element_text(size = 8),
      #axis.text.y = element_text(size = 8)))
```

# 5.6 Building multiple plots

Since ggstasplot is an extension of ggplot2, it also supports faceting. However the feature is not available in *ggcorrmat()* but in the [*grouped_ggcorrmat()*](https://indrajeetpatil.github.io/ggstatsplot/reference/grouped_ggcorrmat.html) of **ggstatsplot**.

```{r}
#| fig-width: 14
#| fig-height: 6
#| column: body-outset-right


grouped_ggcorrmat(
  data = wine,
  cor.vars = 1:11,
  grouping.var = type,
  type = "robust",
  p.adjust.method = "holm",
  plotgrid.args = list(ncol = 2),
  ggcorrplot.args = list(outline.color = "black", 
                         hc.order = TRUE,
                         tl.cex = 10),
  annotation.args = list(
    tag_levels = "a",
    title = "Correlogram for wine dataset",
    subtitle = "The measures are: alcohol, sulphates, fixed acidity, citric acid, chlorides, residual sugar, density, free sulfur dioxide and volatile acidity",
    caption = "Dataset: UCI Machine Learning Repository"
  )
)
```

Things to learn from the code above:

-   to build a facet plot, the only argument needed is `grouping.var`.

-   Behind *grouped_ggcorrmat()*, **patchwork** package is used to create the multiplot. `plotgrid.args` argument provides a list of additional arguments passed to [*patchwork::wrap_plots*](https://patchwork.data-imaginist.com/reference/wrap_plots.html), except for guides argument which is already separately specified earlier.

-   Likewise, `annotation.args` argument is calling [*plot annotation arguments*](https://patchwork.data-imaginist.com/reference/plot_annotation.html) of patchwork package.

# 5.7 Visualising correlation matrix using corrplot package

The are at least three R packages provide function to plot corrgram, they are:

-   [corrgram](https://cran.r-project.org/web/packages/corrgram/)

-   [ellipse](https://cran.r-project.org/web/packages/ellipse/)

-   [corrplot](https://cran.r-project.org/web/packages/corrplot/)

## 5.7.1 Getting started with corrplot

First, we need to compute the correlation matrix of wine data frame.

In the code below, [*cor()*](https://www.rdocumentation.org/packages/stats/versions/3.6.0/topics/cor) of R Stats is used to compute the correlation matrix of wine data frame.

```{r}
wine.cor <- cor(wine[, 1:11])
```

Next, [*corrplot()*](https://www.rdocumentation.org/packages/corrplot/versions/0.2-0/topics/corrplot) is used to plot the corrgram by using all the default setting as shown in the code below.

```{r}
corrplot(wine.cor)
```

The default visual object used to plot the corrgram is circle. The default layout of the corrgram is a symmetric matrix. The default colour scheme is diverging blue-red. Blue colours are used to represent pair variables with positive correlation coefficients and red colours are used to represent pair variables with negative correlation coefficients. The intensity of the colour or also know as **saturation** is used to represent the strength of the correlation coefficient. Darker colours indicate relatively stronger linear relationship between the paired variables. On the other hand, lighter colours indicates relatively weaker linear relationship.

## 5.7.2 Working with visual geometrics

In **corrplot** package, there are seven visual geometrics (parameter method) can be used to encode the attribute values. They are: circle, square, ellipse, number, shade, color and pie. The default is circle. As shown in the previous section, the default visual geometric of corrplot matrix is circle. However, this default setting can be changed by using the *method* argument as shown in the code chunk below.

```{r}
corrplot(wine.cor, 
         method = "ellipse") 
```

```{r}
corrplot(wine.cor, 
         method = "square") 
```

```{r}
corrplot(wine.cor, 
         method = "number") 
```

```{r}
corrplot(wine.cor, 
         method = "shade") 
```

```{r}
corrplot(wine.cor, 
         method = "color") 
```

```{r}
corrplot(wine.cor, 
         method = "pie") 
```

## 5.7.3 Working with layout

*corrplor()* supports three layout types, namely: “full”, “upper” or “lower”. The default is “full” which display full matrix. The default setting can be changed by using the *type* argument of *corrplot()*.

```{r}
corrplot(wine.cor, 
         method = "shade", 
         type="upper")
```

The default layout of the corrgram can be further customised. For example, arguments *diag* and *tl.col* are used to turn off the diagonal cells and to change the axis text label colour to black colour respectively as shown in the code and figure below.

```{r}
corrplot(wine.cor, 
         method = "shade", 
         type="upper",
         diag = FALSE,
         tl.col = "black")
```

We can also experiment with other layout design argument such as *tl.pos*, *tl.cex*, *tl.offset*, *cl.pos*, *cl.cex* and *cl.offset*, just to mention a few.

Parameters group `tl.*` is for text-legend. The common-using are:

-   `tl.pos` is for the position of text labels. It is character or logical. If character, it must be one of `'lt'`, `'ld'`, `'td'`, `'d'`, `'l'` or `'n'`. `'lt'`(default if `type='full'`) means left and top, `'ld'`(default if `type='lower'`) means left and diagonal, `'td'`(default if `type='upper'`) means top and diagonal(near), `'d'` means diagonal, `'l'` means left, `'n'` means don’t add text-label.

-   `tl.cex` is for the size of text label (variable names).

-   `tl.srt` is for text label string rotation in degrees.

```{r}
corrplot(wine.cor, 
         method = "shade", 
         type="upper",
         diag = FALSE,
         tl.pos = 'lt' )
```

```{r}
corrplot(wine.cor, 
         method = "color", 
         type="upper",
         diag = FALSE,
         tl.pos = 'td' )
```

```{r}
corrplot(wine.cor, 
         method = "shade", 
         type="upper",
         diag = FALSE,
         tl.pos = 'n' )
```

```{r}
corrplot(wine.cor, 
         method = "pie", 
         type="upper",
         diag = FALSE,
         tl.cex = 0.5 )
```

```{r}
corrplot(wine.cor, 
         method = "square", 
         type="upper",
         diag = FALSE,
         tl.cex = 1 )
```

```{r}
corrplot(wine.cor, 
         method = "ellipse", 
         type="upper",
         diag = FALSE,
         tl.srt = 45 )
```

## 5.7.4 Working with mixed layout

With **corrplot** package, it is possible to design corrgram with mixed visual matrix of one half and numerical matrix on the other half. In order to create a coorgram with mixed layout, the [*corrplot.mixed()*](https://www.rdocumentation.org/packages/corrplot/versions/0.84/topics/corrplot.mixed), a wrapped function for mixed visualisation style will be used.

Figure below shows a mixed layout corrgram plotted using wine quality data.

```{r}
corrplot.mixed(wine.cor, 
               lower = "shade", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "blue",
               tl.srt = 45)
```

```{r}
corrplot.mixed(wine.cor, 
               lower = "circle", 
               upper = "square",
               tl.pos = "lt",
               diag = "l",
               tl.col = "red")
```

The argument *lower* and *upper* are used to define the visualisation method used. In this case circle is used to map the lower half of the corrgram and square is used to map the upper half of the corrgram. The argument *tl.pos*, on the other, is used to specify the placement of the axis label. Lastly, the *diag* argument is used to specify the glyph on the principal diagonal of the corrgram.

## 5.7.5 Combining corrgram with significant test

We are also interested to know which pair of variables has correlation coefficients that are statistically significant.

Figure below shows a corrgram combined with the significant test. The corrgram reveals that not all correlation pairs are statistically significant. For example the correlation between total sulfur dioxide and free surfur dioxide is statistically significant at significant level of 0.1 but not the pair between total sulfur dioxide and citric acid.

```{r}
#| echo: false

wine.sig = cor.mtest(wine.cor, conf.level= .95)

corrplot(wine.cor,
         method = "number",
         type = "lower",
         diag = FALSE,
         tl.col = "black",
         tl.srt = 45,
         p.mat = wine.sig$p,
         sig.level = .05)
```

We can use the *cor.mtest()* to compute the p-values and confidence interval for each pair of variables.

```{r}
wine.sig = cor.mtest(wine.cor, conf.level= .95)
```

We can then use the *p.mat* argument of *corrplot* function as shown in the code below.

```{r}
corrplot(wine.cor,
         method = "number",
         type = "lower",
         diag = FALSE,
         tl.col = "black",
         tl.srt = 45,
         p.mat = wine.sig$p,
         sig.level = .05)
```

## 5.7.6 Reorder a corrgram

Matrix reorder is very important for mining the hidden structure and pattern in a corrgram. By default, the order of attributes of a corrgram is sorted according to the correlation matrix (i.e. “original”). The default setting can be over-written by using the *order* argument of *corrplot()*. Currently, **corrplot** package support four sorting methods, they are:

-   “AOE” is for the angular order of the eigenvectors. See Michael Friendly (2002) for details.

-   “FPC” for the first principal component order.

-   “hclust” for hierarchical clustering order, and “hclust.method” for the agglomeration method to be used.

    -   “hclust.method” should be one of “ward”, “single”, “complete”, “average”, “mcquitty”, “median” or “centroid”.

-   “alphabet” for alphabetical order.

“AOE”, “FPC”, “hclust”, “alphabet”. More algorithms can be found in **seriation** package.

```{r}
corrplot.mixed(wine.cor, 
               lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               order="AOE",
               tl.col = "black")
```

```{r}
corrplot.mixed(wine.cor, 
               lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               order="FPC",
               tl.col = "black")
```

```{r}
corrplot.mixed(wine.cor, 
               lower = "ellipse", 
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               order="alphabet",
               tl.col = "black")
```

```{r}
corrplot(wine.cor, 
         method = "ellipse", 
         tl.pos = "lt",
         tl.col = "red",
         order="hclust",
         hclust.method = "centroid",
         addrect = 5)
```

## 5.7.7 Reordering a correlation matrix using hclust

If using **hclust**, ***corrplot()*** can draw rectangles around the corrgram based on the results of hierarchical clustering.

```{r}
corrplot(wine.cor, 
         method = "ellipse", 
         tl.pos = "lt",
         tl.col = "black",
         order="hclust",
         hclust.method = "ward.D",
         addrect = 6)
```

```{r}
corrplot(wine.cor, 
         method = "shade", 
         tl.pos = "lt",
         tl.col = "black",
         order="hclust",
         hclust.method = "mcquitty",
         addrect = 6)
```

```{r}
corrplot(wine.cor, 
         method = "shade", 
         tl.pos = "lt",
         tl.col = "black",
         order="hclust",
         hclust.method = "average",
         addrect = 8)
```

# 5.8 Plotting Practise

Below are a few sample plots for practise.

# 5.9 References

Michael Friendly (2002). “Corrgrams: Exploratory displays for correlation matrices”. *The American Statistician*, 56, 316–324.

D.J. Murdoch, E.D. Chow (1996). “A graphical display of large correlation matrices”. *The American Statistician*, 50, 178–180.

Main reference: Kam, T.S. (2024). [Visual Correlation Analysis.](https://r4va.netlify.app/chap06#visualising-correlation-matrix-using-corrplot-package)

## 5.9.1 R packages

-   [`ggcormat()`](https://indrajeetpatil.github.io/ggstatsplot/articles/web_only/ggcorrmat.html) of [**ggstatsplot**](https://indrajeetpatil.github.io/ggstatsplot/) package

-   [`ggscatmat`](https://ggobi.github.io/ggally/reference/ggscatmat.html) and [`ggpairs`](https://ggobi.github.io/ggally/reference/ggpairs.html) of [**GGally**](https://ggobi.github.io/ggally/).

-   [**corrplot**](https://cran.r-project.org/web/packages/corrplot/). A graphical display of a correlation matrix or general matrix. It also contains some algorithms to do matrix reordering. In addition, corrplot is good at details, including choosing color, text labels, color labels, layout, etc.

-   [**corrgram**](https://cran.r-project.org/web/packages/corrgram/) calculates correlation of variables and displays the results graphically. Included panel functions can display points, shading, ellipses, and correlation values with confidence intervals.
