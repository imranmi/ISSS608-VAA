---
title: "Take-home Exercise 4d - plotting for project poster"
date: March 22, 2024
date-modified: "last-modified"
author: "Imran Ibrahim"
toc: true
execute: 
  eval: true
  echo: true
  freeze: true
  warning: false
  message: false
---

# Getting Started

## Loading R packages and Data prep

```{r}
pacman::p_load(tidyverse, dplyr, tidyr, 
               sf, lubridate,plotly,
               tmap, spdep, sfdep, knitr, forcats)
```

```{r}
ACLED_MMR <- read_csv("data/MMR.csv")
```

```{r}
mmr_shp_mimu_2 <-  st_read(dsn = "data/geospatial3",  
                  layer = "mmr_polbnda_adm2_250k_mimu")
```

```{r}
ACLED_MMR_1 <- ACLED_MMR %>%
  mutate(admin1 = case_when(
    admin1 == "Bago-East" ~ "Bago (East)",
    admin1 == "Bago-West" ~ "Bago (West)",
    admin1 == "Shan-North" ~ "Shan (North)",
    admin1 == "Shan-South" ~ "Shan (South)",
    admin1 == "Shan-East" ~ "Shan (East)",
    TRUE ~ as.character(admin1)
  ))
```

```{r}
ACLED_MMR_1 <- ACLED_MMR_1 %>%
  mutate(admin2 = case_when(
    admin2 == "Yangon-East" ~ "Yangon (East)",
    admin2 == "Yangon-West" ~ "Yangon (West)",
    admin2 == "Yangon-North" ~ "Yangon (North)",
    admin2 == "Yangon-South" ~ "Yangon (South)",
    admin2 == "Mong Pawk (Wa SAD)" ~ "Tachileik",
    admin2 == "Nay Pyi Taw" ~ "Det Khi Na",
    admin2 == "Yangon" ~ "Yangon (West)",
    TRUE ~ as.character(admin2)
  ))
```

### Loading in previously wrangled data for quarterly data

```{r}
Events_2 <- read_csv("data/df_complete.csv")
```

```{r}
Events_admin2 <- left_join(mmr_shp_mimu_2, Events_2,
                            by = c("DT" = "admin2"))
```

```{r}
Events_admin2 <- Events_admin2 %>%
                      select(-OBJECTID, -ST, -ST_PCODE, 
                             -DT_PCODE, -DT_MMR, -PCode_V)
```

```{r}
class(Events_admin2)
```

## Filtering for Event type == Battles, for all quarters from 2021-2023

```{r}
#| code-fold: true
#| code-summary: "Show the code"


Battles2021Q1 <- Events_admin2 %>%
  filter(quarter == "2021Q1", event_type == "Battles")

Battles2021Q2 <- Events_admin2 %>%
  filter(quarter == "2021Q2", event_type == "Battles")

Battles2021Q3 <- Events_admin2 %>%
  filter(quarter == "2021Q3", event_type == "Battles")

Battles2021Q4 <- Events_admin2 %>%
  filter(quarter == "2021Q4", event_type == "Battles")

Battles2022Q1 <- Events_admin2 %>%
  filter(quarter == "2022Q1", event_type == "Battles")

Battles2022Q2 <- Events_admin2 %>%
  filter(quarter == "2022Q2", event_type == "Battles")

Battles2022Q3 <- Events_admin2 %>%
  filter(quarter == "2022Q3", event_type == "Battles")

Battles2022Q4 <- Events_admin2 %>%
  filter(quarter == "2022Q4", event_type == "Battles")

Battles2023Q1 <- Events_admin2 %>%
  filter(quarter == "2023Q1", event_type == "Battles")

Battles2023Q2 <- Events_admin2 %>%
  filter(quarter == "2023Q2", event_type == "Battles")

Battles2023Q3 <- Events_admin2 %>%
  filter(quarter == "2023Q3", event_type == "Battles")

Battles2023Q4 <- Events_admin2 %>%
  filter(quarter == "2023Q4", event_type == "Battles")
```

### Deriving contiguity weights: Queenâ€™s method

```{r}
#| code-fold: true
#| code-summary: "Show the code"


wm_q1 <- Battles2021Q1 %>%
  mutate(nb = st_contiguity(geometry),
         wt = st_weights(nb,
                         style = "W"),
         .before = 1) 

wm_q2 <- Battles2021Q2 %>%
  mutate(nb = st_contiguity(geometry),
         wt = st_weights(nb,
                         style = "W"),
         .before = 1) 

wm_q3 <- Battles2021Q3 %>%
  mutate(nb = st_contiguity(geometry),
         wt = st_weights(nb,
                         style = "W"),
         .before = 1) 

wm_q4 <- Battles2021Q4 %>%
  mutate(nb = st_contiguity(geometry),
         wt = st_weights(nb,
                         style = "W"),
         .before = 1) 

wm_q5 <- Battles2022Q1 %>%
  mutate(nb = st_contiguity(geometry),
         wt = st_weights(nb,
                         style = "W"),
         .before = 1) 

wm_q6 <- Battles2022Q2 %>%
  mutate(nb = st_contiguity(geometry),
         wt = st_weights(nb,
                         style = "W"),
         .before = 1) 

wm_q7 <- Battles2022Q3 %>%
  mutate(nb = st_contiguity(geometry),
         wt = st_weights(nb,
                         style = "W"),
         .before = 1) 

wm_q8 <- Battles2022Q4 %>%
  mutate(nb = st_contiguity(geometry),
         wt = st_weights(nb,
                         style = "W"),
         .before = 1) 

wm_q9 <- Battles2023Q1 %>%
  mutate(nb = st_contiguity(geometry),
         wt = st_weights(nb,
                         style = "W"),
         .before = 1) 

wm_q10 <- Battles2023Q2 %>%
  mutate(nb = st_contiguity(geometry),
         wt = st_weights(nb,
                         style = "W"),
         .before = 1) 

wm_q11 <- Battles2023Q3 %>%
  mutate(nb = st_contiguity(geometry),
         wt = st_weights(nb,
                         style = "W"),
         .before = 1) 

wm_q12 <- Battles2023Q4 %>%
  mutate(nb = st_contiguity(geometry),
         wt = st_weights(nb,
                         style = "W"),
         .before = 1) 
```

### No of sims = 199

```{r}
#| code-fold: true
#| code-summary: "Show the code"


lisa1 <- wm_q1 %>% 
  mutate(local_moran = local_moran(
    Incidents, nb, wt, nsim = 199),
         .before = 1) %>%
  unnest(local_moran)

lisa2 <- wm_q2 %>% 
  mutate(local_moran = local_moran(
    Incidents, nb, wt, nsim = 199),
         .before = 1) %>%
  unnest(local_moran)

lisa3 <- wm_q3 %>% 
  mutate(local_moran = local_moran(
    Incidents, nb, wt, nsim = 199),
         .before = 1) %>%
  unnest(local_moran)

lisa4 <- wm_q4 %>% 
  mutate(local_moran = local_moran(
    Incidents, nb, wt, nsim = 199),
         .before = 1) %>%
  unnest(local_moran)

lisa5 <- wm_q5 %>% 
  mutate(local_moran = local_moran(
    Incidents, nb, wt, nsim = 199),
         .before = 1) %>%
  unnest(local_moran)

lisa6 <- wm_q6 %>% 
  mutate(local_moran = local_moran(
    Incidents, nb, wt, nsim = 199),
         .before = 1) %>%
  unnest(local_moran)

lisa7 <- wm_q7 %>% 
  mutate(local_moran = local_moran(
    Incidents, nb, wt, nsim = 199),
         .before = 1) %>%
  unnest(local_moran)

lisa8 <- wm_q8 %>% 
  mutate(local_moran = local_moran(
    Incidents, nb, wt, nsim = 199),
         .before = 1) %>%
  unnest(local_moran)

lisa9 <- wm_q9 %>% 
  mutate(local_moran = local_moran(
    Incidents, nb, wt, nsim = 199),
         .before = 1) %>%
  unnest(local_moran)

lisa10 <- wm_q10 %>% 
  mutate(local_moran = local_moran(
    Incidents, nb, wt, nsim = 199),
         .before = 1) %>%
  unnest(local_moran)

lisa11 <- wm_q11 %>% 
  mutate(local_moran = local_moran(
    Incidents, nb, wt, nsim = 199),
         .before = 1) %>%
  unnest(local_moran)

lisa12 <- wm_q12 %>% 
  mutate(local_moran = local_moran(
    Incidents, nb, wt, nsim = 199),
         .before = 1) %>%
  unnest(local_moran)
```

Visualising LISA Map

Getting the Significant P-values

```{r}
#| code-fold: true
#| code-summary: "Show the code"


lisa_sig1 <- lisa1  %>%
  filter(p_ii < 0.05)

lisa_sig2 <- lisa2  %>%
  filter(p_ii < 0.05)

lisa_sig3 <- lisa3  %>%
  filter(p_ii < 0.05)

lisa_sig4 <- lisa4  %>%
  filter(p_ii < 0.05)

lisa_sig5 <- lisa5  %>%
  filter(p_ii < 0.05)

lisa_sig6 <- lisa6  %>%
  filter(p_ii < 0.05)

lisa_sig7 <- lisa7  %>%
  filter(p_ii < 0.05)

lisa_sig8 <- lisa8  %>%
  filter(p_ii < 0.05)

lisa_sig9 <- lisa9  %>%
  filter(p_ii < 0.05)

lisa_sig10 <- lisa10  %>%
  filter(p_ii < 0.05)

lisa_sig11 <- lisa11  %>%
  filter(p_ii < 0.05)

lisa_sig12 <- lisa12  %>%
  filter(p_ii < 0.05)

```

```{r}
#| code-fold: true
#| code-summary: "Show the code"

lisa_sig1_1 <-  lisa_sig1 %>%
  select(mean, DT, quarter)

lisa_sig2_1 <-  lisa_sig2 %>%
  select(mean, DT, quarter)

lisa_sig3_1 <-  lisa_sig3 %>%
  select(mean, DT, quarter)

lisa_sig4_1 <-  lisa_sig4 %>%
  select(mean, DT, quarter)

lisa_sig5_1 <-  lisa_sig5 %>%
  select(mean, DT, quarter)

lisa_sig6_1 <-  lisa_sig6 %>%
  select(mean, DT, quarter)

lisa_sig7_1 <-  lisa_sig7 %>%
  select(mean, DT, quarter)

lisa_sig8_1 <-  lisa_sig8 %>%
  select(mean, DT, quarter)

lisa_sig9_1 <-  lisa_sig9 %>%
  select(mean, DT, quarter)

lisa_sig10_1 <-  lisa_sig10 %>%
  select(mean, DT, quarter)

lisa_sig11_1 <-  lisa_sig11 %>%
  select(mean, DT, quarter)

lisa_sig12_1 <-  lisa_sig12 %>%
  select(mean, DT, quarter)

```

```{r}
#| code-fold: true
#| code-summary: "Show the code"

# Bind the two data frames together
combined_df <- bind_rows(lisa_sig1_1, lisa_sig2_1,
                         lisa_sig3_1, lisa_sig4_1,
                         lisa_sig5_1, lisa_sig6_1,
                         lisa_sig7_1, lisa_sig8_1,
                         lisa_sig9_1, lisa_sig10_1,
                         lisa_sig11_1, lisa_sig12_1,)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"

quarter_summary_df <- combined_df %>%
  group_by(DT, mean) %>%
  summarize(
    Quarters = paste(unique(quarter), collapse = ", "),
    .groups = 'drop'
  )


```

```{r}
#| code-fold: true
#| code-summary: "Show the code"


wide_quarter_summary_df <- quarter_summary_df %>%
  pivot_wider(
    names_from = mean,
    values_from = Quarters,
    values_fill = list(Quarters = NA)  # Fill with NA where there are no quarters
  )

```

```{r}
print(wide_quarter_summary_df)
```

```{r}
# Remove the geometry column to make it a regular data frame
regular_df <- st_drop_geometry(wide_quarter_summary_df)
```

```{r}
#| fig-width: 12
#| fig-height: 12
#| column: body-outset-right

regular_df <- regular_df %>%
  rename("District" = "DT")

kable(regular_df)
```

```{r}
summary_df1 <- combined_df %>%
  group_by(DT) %>%
  summarize(
    High_High_Clusters = sum(mean == "High-High"),
    Low_High_Clusters = sum(mean == "Low-High"),
    Low_Low_Clusters = sum(mean == "Low-Low"),   
    .groups = 'drop'
  )

# Remove the geometry column to make it a regular data frame
regular_df1 <- st_drop_geometry(summary_df1)
```

```{r}
top10_high_high_df <- regular_df1 %>%
  arrange(desc(High_High_Clusters)) %>%
  slice_head(n = 10) %>%
  rename("District" = "DT")


kable(top10_high_high_df)
```

```{r}

LISAbar <- ggplot(data = top10_high_high_df, aes(x = fct_reorder(District, High_High_Clusters), y = High_High_Clusters)) +
  geom_bar(stat = "identity") + 
  coord_flip() +
  theme_minimal() +
  theme(axis.title.x = element_blank(), axis.title.y = element_blank(),  
        axis.text.x = element_blank()) + 
  ggtitle("Top 10 Districts with the most High-High Clusters (2021-2023)") + 
  geom_text(aes(label = High_High_Clusters), hjust = -0.1) 

LISAbar



```

```{r}
#| code-fold: true
#| code-summary: "Show the code"


lisamap1 <- tm_shape(lisa1) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(lisa_sig1) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "LISA Map for Battles in 2021",
            title = "Quarter 1",
            main.title.size = 0.90,
            legend.height = 0.60, 
            legend.width = 5.0,
            legend.outside = FALSE,
            legend.position = c("left", "bottom"))

lisamap2 <- tm_shape(lisa2) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(lisa_sig2) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "LISA Map for Battles in 2021",
            title = "Quarter 2",
            main.title.size = 0.90,
            legend.height = 0.60, 
            legend.width = 5.0,
            legend.outside = FALSE,
            legend.position = c("left", "bottom"))

lisamap3 <- tm_shape(lisa3) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(lisa_sig3) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "LISA Map for Battles in 2021",
            title = "Quarter 3",
            main.title.size = 0.90,
            legend.height = 0.60, 
            legend.width = 5.0,
            legend.outside = FALSE,
            legend.position = c("left", "bottom"))

lisamap4 <- tm_shape(lisa4) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(lisa_sig4) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "LISA Map for Battles in 2021",
            title = "Quarter 4",
            main.title.size = 0.90,
            legend.height = 0.60, 
            legend.width = 5.0,
            legend.outside = FALSE,
            legend.position = c("left", "bottom"))

lisamap5 <- tm_shape(lisa5) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(lisa_sig5) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "LISA Map for Battles in 2022",
            title = "Quarter 1",
            main.title.size = 0.90,
            legend.height = 0.60, 
            legend.width = 5.0,
            legend.outside = FALSE,
            legend.position = c("left", "bottom"))

lisamap6 <- tm_shape(lisa6) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(lisa_sig6) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "LISA Map for Battles in 2022",
            title = "Quarter 2",
            main.title.size = 0.90,
            legend.height = 0.60, 
            legend.width = 5.0,
            legend.outside = FALSE,
            legend.position = c("left", "bottom"))

lisamap7 <- tm_shape(lisa7) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(lisa_sig7) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "LISA Map for Battles in 2022",
            title = "Quarter 3",
            main.title.size = 0.90,
            legend.height = 0.60, 
            legend.width = 5.0,
            legend.outside = FALSE,
            legend.position = c("left", "bottom"))

lisamap8 <- tm_shape(lisa8) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(lisa_sig8) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "LISA Map for Battles in 2022",
            title = "Quarter 4",
            main.title.size = 0.90,
            legend.height = 0.60, 
            legend.width = 5.0,
            legend.outside = FALSE,
            legend.position = c("left", "bottom"))

lisamap9 <- tm_shape(lisa9) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(lisa_sig9) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "LISA Map for Battles in 2023",
            title = "Quarter 1",
            main.title.size = 0.90,
            legend.height = 0.60, 
            legend.width = 5.0,
            legend.outside = FALSE,
            legend.position = c("left", "bottom"))

lisamap10 <- tm_shape(lisa10) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(lisa_sig10) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "LISA Map for Battles in 2023",
            title = "Quarter 2",
            main.title.size = 0.90,
            legend.height = 0.60, 
            legend.width = 5.0,
            legend.outside = FALSE,
            legend.position = c("left", "bottom"))

lisamap11 <- tm_shape(lisa11) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(lisa_sig11) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "LISA Map for Battles in 2023",
            title = "Quarter 3",
            main.title.size = 0.90,
            legend.height = 0.60, 
            legend.width = 5.0,
            legend.outside = FALSE,
            legend.position = c("left", "bottom"))

lisamap12 <- tm_shape(lisa12) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(lisa_sig12) +
  tm_fill("mean") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "LISA Map for Battles in 2022",
            title = "Quarter 4",
            main.title.size = 0.90,
            legend.height = 0.60, 
            legend.width = 5.0,
            legend.outside = FALSE,
            legend.position = c("left", "bottom"))
```

```{r}
#| fig-width: 12
#| fig-height: 12
#| column: body-outset-right

tmap_arrange(lisamap1, lisamap2, lisamap3, lisamap4, 
             lisamap5, lisamap6, lisamap7, lisamap8, 
             lisamap9, lisamap10, lisamap11, lisamap12, 
             asp = 1,
             ncol=4, nrow=3)
```

# Hot and Cold Spot Analysis (HCSA)

## Computing local Gi\* statistics

We will need to derive a spatial weight matrix before we can compute local Gi\* statistics. Code chunk below will be used to derive a spatial weight matrix by using sfdep functions and tidyverse approach.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

wm_idw1 <- Battles2021Q1 %>%
  mutate(nb = st_contiguity(geometry),
         wts = st_inverse_distance(nb, geometry,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)

wm_idw2 <- Battles2021Q2 %>%
  mutate(nb = st_contiguity(geometry),
         wts = st_inverse_distance(nb, geometry,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)

wm_idw3 <- Battles2021Q3 %>%
  mutate(nb = st_contiguity(geometry),
         wts = st_inverse_distance(nb, geometry,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)

wm_idw4 <- Battles2021Q4 %>%
  mutate(nb = st_contiguity(geometry),
         wts = st_inverse_distance(nb, geometry,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)

wm_idw5 <- Battles2022Q1 %>%
  mutate(nb = st_contiguity(geometry),
         wts = st_inverse_distance(nb, geometry,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)

wm_idw6 <- Battles2022Q2 %>%
  mutate(nb = st_contiguity(geometry),
         wts = st_inverse_distance(nb, geometry,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)

wm_idw7 <- Battles2022Q3 %>%
  mutate(nb = st_contiguity(geometry),
         wts = st_inverse_distance(nb, geometry,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)

wm_idw8 <- Battles2022Q4 %>%
  mutate(nb = st_contiguity(geometry),
         wts = st_inverse_distance(nb, geometry,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)

wm_idw9 <- Battles2023Q1 %>%
  mutate(nb = st_contiguity(geometry),
         wts = st_inverse_distance(nb, geometry,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)

wm_idw10 <- Battles2023Q2 %>%
  mutate(nb = st_contiguity(geometry),
         wts = st_inverse_distance(nb, geometry,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)

wm_idw11 <- Battles2023Q3 %>%
  mutate(nb = st_contiguity(geometry),
         wts = st_inverse_distance(nb, geometry,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)

wm_idw12 <- Battles2023Q4 %>%
  mutate(nb = st_contiguity(geometry),
         wts = st_inverse_distance(nb, geometry,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)
```

### No of sim = 199

```{r}
#| code-fold: true
#| code-summary: "Show the code"

HCSA1 <- wm_idw1 %>% 
  mutate(local_Gi = local_gstar_perm(
    Incidents, nb, wt, nsim = 199),
         .before = 1) %>%
  unnest(local_Gi)

HCSA2 <- wm_idw2 %>% 
  mutate(local_Gi = local_gstar_perm(
    Incidents, nb, wt, nsim = 199),
         .before = 1) %>%
  unnest(local_Gi)

HCSA3 <- wm_idw3 %>% 
  mutate(local_Gi = local_gstar_perm(
    Incidents, nb, wt, nsim = 199),
         .before = 1) %>%
  unnest(local_Gi)

HCSA4 <- wm_idw4 %>% 
  mutate(local_Gi = local_gstar_perm(
    Incidents, nb, wt, nsim = 199),
         .before = 1) %>%
  unnest(local_Gi)

HCSA5 <- wm_idw5 %>% 
  mutate(local_Gi = local_gstar_perm(
    Incidents, nb, wt, nsim = 199),
         .before = 1) %>%
  unnest(local_Gi)

HCSA6 <- wm_idw6 %>% 
  mutate(local_Gi = local_gstar_perm(
    Incidents, nb, wt, nsim = 199),
         .before = 1) %>%
  unnest(local_Gi)

HCSA7 <- wm_idw7 %>% 
  mutate(local_Gi = local_gstar_perm(
    Incidents, nb, wt, nsim = 199),
         .before = 1) %>%
  unnest(local_Gi)

HCSA8 <- wm_idw8 %>% 
  mutate(local_Gi = local_gstar_perm(
    Incidents, nb, wt, nsim = 199),
         .before = 1) %>%
  unnest(local_Gi)

HCSA9 <- wm_idw9 %>% 
  mutate(local_Gi = local_gstar_perm(
    Incidents, nb, wt, nsim = 199),
         .before = 1) %>%
  unnest(local_Gi)

HCSA10 <- wm_idw10 %>% 
  mutate(local_Gi = local_gstar_perm(
    Incidents, nb, wt, nsim = 199),
         .before = 1) %>%
  unnest(local_Gi)

HCSA11 <- wm_idw11 %>% 
  mutate(local_Gi = local_gstar_perm(
    Incidents, nb, wt, nsim = 199),
         .before = 1) %>%
  unnest(local_Gi)

HCSA12 <- wm_idw12 %>% 
  mutate(local_Gi = local_gstar_perm(
    Incidents, nb, wt, nsim = 199),
         .before = 1) %>%
  unnest(local_Gi)
```

Calculating the significant p-vals \< 0.05

```{r}
#| code-fold: true
#| code-summary: "Show the code"

HCSA_sig1 <- HCSA1  %>%
  filter(p_value < 0.05)

HCSA_sig2 <- HCSA2  %>%
  filter(p_value < 0.05)

HCSA_sig3 <- HCSA3  %>%
  filter(p_value < 0.05)

HCSA_sig4 <- HCSA4  %>%
  filter(p_value < 0.05)

HCSA_sig5 <- HCSA5  %>%
  filter(p_value < 0.05)

HCSA_sig6 <- HCSA6  %>%
  filter(p_value < 0.05)

HCSA_sig7 <- HCSA7  %>%
  filter(p_value < 0.05)

HCSA_sig8 <- HCSA8  %>%
  filter(p_value < 0.05)

HCSA_sig9 <- HCSA9  %>%
  filter(p_value < 0.05)

HCSA_sig10 <- HCSA10  %>%
  filter(p_value < 0.05)

HCSA_sig11 <- HCSA11  %>%
  filter(p_value < 0.05)

HCSA_sig12 <- HCSA12  %>%
  filter(p_value < 0.05)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"

HCSA_sig1_1 <-  HCSA_sig1 %>%
  select(cluster, DT, quarter)

HCSA_sig2_1 <-  HCSA_sig2 %>%
  select(cluster, DT, quarter)

HCSA_sig3_1 <-  HCSA_sig3 %>%
  select(cluster, DT, quarter)

HCSA_sig4_1 <-  HCSA_sig4 %>%
  select(cluster, DT, quarter)

HCSA_sig5_1 <-  HCSA_sig5 %>%
  select(cluster, DT, quarter)

HCSA_sig6_1 <-  HCSA_sig6 %>%
  select(cluster, DT, quarter)

HCSA_sig7_1 <-  HCSA_sig7 %>%
  select(cluster, DT, quarter)

HCSA_sig8_1 <-  HCSA_sig8 %>%
  select(cluster, DT, quarter)

HCSA_sig9_1 <-  HCSA_sig9 %>%
  select(cluster, DT, quarter)

HCSA_sig10_1 <-  HCSA_sig10 %>%
  select(cluster, DT, quarter)

HCSA_sig11_1 <-  HCSA_sig11 %>%
  select(cluster, DT, quarter)

HCSA_sig12_1 <-  HCSA_sig12 %>%
  select(cluster, DT, quarter)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"

# Bind the data frames together
combined_df2 <- bind_rows(HCSA_sig1_1, HCSA_sig2_1,
                         HCSA_sig3_1, HCSA_sig4_1,
                         HCSA_sig5_1, HCSA_sig6_1,
                         HCSA_sig7_1, HCSA_sig8_1,
                         HCSA_sig9_1, HCSA_sig10_1,
                         HCSA_sig11_1, HCSA_sig12_1,)
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"

quarter_summary_df2 <- combined_df2 %>%
  group_by(DT, cluster) %>%
  summarize(
    Quarters = paste(unique(quarter), collapse = ", "),
    .groups = 'drop'
  )
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"

wide_quarter_summary_df2 <- quarter_summary_df2 %>%
  pivot_wider(
    names_from = cluster,
    values_from = Quarters,
    values_fill = list(Quarters = NA)  # Fill with NA where there are no quarters
  )
```

```{r}
print(wide_quarter_summary_df2)
```

```{r}
# Remove the geometry column to make it a regular data frame
regular_df2 <- st_drop_geometry(wide_quarter_summary_df2)
```

```{r}
#| fig-width: 12
#| fig-height: 12
#| column: body-outset-right

regular_df2 <- regular_df2 %>%
  rename("District" = "DT")

kable(regular_df2)
```

```{r}
summary_df2 <- combined_df2 %>%
  group_by(DT) %>%
  summarize(
    High_Clusters = sum(cluster == "High"),
    Low_Clusters = sum(cluster == "Low"),
    .groups = 'drop'
  )

# Remove the geometry column to make it a regular data frame
regular_df3 <- st_drop_geometry(summary_df2)
```

```{r}
top10_high_df <- regular_df3 %>%
  arrange(desc(High_Clusters)) %>%
  slice_head(n = 10) %>%
  rename("District" = "DT")


kable(top10_high_df)
```

```{r}
HCSAbar <- ggplot(data = top10_high_df, aes(x = fct_reorder(District, High_Clusters), y = High_Clusters)) +
  geom_bar(stat = "identity") + 
  coord_flip() +
  theme_minimal() +
  theme(axis.title.x = element_blank(), axis.title.y = element_blank(),  
        axis.text.x = element_blank()) + 
  ggtitle("Top 10 Districts with the most High Clusters (2021-2023)") + 
  geom_text(aes(label = High_Clusters), hjust = -0.1) 

HCSAbar
```

```{r}
#| code-fold: true
#| code-summary: "Show the code"

HCSAmap1 <- tm_shape(HCSA1) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(HCSA_sig1) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = " HCSA Map for Battles in 2021",
            title = "Quarter 1",
            main.title.size = 0.90,
            legend.height = 0.60, 
            legend.width = 5.0,
            legend.outside = FALSE,
            legend.position = c("left", "bottom"))

HCSAmap2 <- tm_shape(HCSA2) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(HCSA_sig2) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "HCSA Map for Battles in 2021",
            title = "Quarter 2",
            main.title.size = 0.90,
            legend.height = 0.60, 
            legend.width = 5.0,
            legend.outside = FALSE,
            legend.position = c("left", "bottom"))

HCSAmap3 <- tm_shape(HCSA3) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(HCSA_sig3) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "HCSA Map for Battles in 2021",
            title = "Quarter 3",
            main.title.size = 0.90,
            legend.height = 0.60, 
            legend.width = 5.0,
            legend.outside = FALSE,
            legend.position = c("left", "bottom"))

HCSAmap4 <- tm_shape(HCSA4) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(HCSA_sig4) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "HCSA Map for Battles in 2021",
            title = "Quarter 4",
            main.title.size = 0.90,
            legend.height = 0.60, 
            legend.width = 5.0,
            legend.outside = FALSE,
            legend.position = c("left", "bottom"))

HCSAmap5 <- tm_shape(HCSA5) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(HCSA_sig5) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "HCSA Map for Battles in 2022",
            title = "Quarter 1",
            main.title.size = 0.90,
            legend.height = 0.60, 
            legend.width = 5.0,
            legend.outside = FALSE,
            legend.position = c("left", "bottom"))

HCSAmap6 <- tm_shape(HCSA6) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(HCSA_sig6) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "HCSA Map for Battles in 2022",
            title = "Quarter 2",
            main.title.size = 0.90,
            legend.height = 0.60, 
            legend.width = 5.0,
            legend.outside = FALSE,
            legend.position = c("left", "bottom"))

HCSAmap7 <- tm_shape(HCSA7) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(HCSA_sig7) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "HCSA Map for Battles in 2022",
            title = "Quarter 3",
            main.title.size = 0.90,
            legend.height = 0.60, 
            legend.width = 5.0,
            legend.outside = FALSE,
            legend.position = c("left", "bottom"))

HCSAmap8 <- tm_shape(HCSA8) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(HCSA_sig8) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "HCSA Map for Battles in 2022",
            title = "Quarter 4",
            main.title.size = 0.90,
            legend.height = 0.60, 
            legend.width = 5.0,
            legend.outside = FALSE,
            legend.position = c("left", "bottom"))

HCSAmap9 <- tm_shape(HCSA9) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(HCSA_sig9) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "HCSA Map for Battles in 2023",
            title = "Quarter 1",
            main.title.size = 0.90,
            legend.height = 0.60, 
            legend.width = 5.0,
            legend.outside = FALSE,
            legend.position = c("left", "bottom"))

HCSAmap10 <- tm_shape(HCSA10) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(HCSA_sig10) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "HCSA Map for Battles in 2023",
            title = "Quarter 2",
            main.title.size = 0.90,
            legend.height = 0.60, 
            legend.width = 5.0,
            legend.outside = FALSE,
            legend.position = c("left", "bottom"))

HCSAmap11 <- tm_shape(HCSA11) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(HCSA_sig11) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "HCSA Map for Battles in 2023",
            title = "Quarter 3",
            main.title.size = 0.90,
            legend.height = 0.60, 
            legend.width = 5.0,
            legend.outside = FALSE,
            legend.position = c("left", "bottom"))

HCSAmap12 <- tm_shape(HCSA12) +
  tm_polygons() +
  tm_borders(alpha = 0.5) +
tm_shape(HCSA_sig12) +
  tm_fill("gi_star") + 
  tm_borders(alpha = 0.4) +
  tm_layout(main.title = "HCSA Map for Battles in 2022",
            title = "Quarter 4",
            main.title.size = 0.90,
            legend.height = 0.60, 
            legend.width = 5.0,
            legend.outside = FALSE,
            legend.position = c("left", "bottom"))
```

```{r}
#| fig-width: 12
#| fig-height: 12
#| column: body-outset-right

tmap_arrange(HCSAmap1, HCSAmap2, HCSAmap3, HCSAmap4, 
             HCSAmap5, HCSAmap6, HCSAmap7, HCSAmap8, 
             HCSAmap9, HCSAmap10, HCSAmap11, HCSAmap12, 
             asp = 1,
             ncol=4, nrow=3)
```
